<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Stefan Scherer's Blog</title><description>Just my techie notes.</description><link>https://stefanscherer.github.io/</link><generator>Ghost 0.11</generator><lastBuildDate>Sat, 05 Aug 2017 01:12:23 GMT</lastBuildDate><atom:link href="https://stefanscherer.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Use Docker to Search in 320 Million Pwned Passwords</title><description>&lt;p&gt;This week Troy Hunt, a security researcher announced a freely downloadable list of pwned passwords. Troy is the creator of &lt;a href="https://haveibeenpwned.com"&gt;Have I Been Pwned?&lt;/a&gt; website and service that will notify you when one of your registered email addresses have been compromised by a data breach.&lt;/p&gt;

&lt;p&gt;In his latest blog post&lt;/p&gt;</description><link>https://stefanscherer.github.io/use-docker-to-search-in-320-million-pwned-passwords/</link><guid isPermaLink="false">782eaeb6-6c8e-4321-a860-432ab5d32030</guid><category>Docker</category><category>multi-stage</category><category>HaveIBeenPwned</category><category>passwords</category><category>Security</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Sat, 05 Aug 2017 00:55:07 GMT</pubDate><content:encoded>&lt;p&gt;This week Troy Hunt, a security researcher announced a freely downloadable list of pwned passwords. Troy is the creator of &lt;a href="https://haveibeenpwned.com"&gt;Have I Been Pwned?&lt;/a&gt; website and service that will notify you when one of your registered email addresses have been compromised by a data breach.&lt;/p&gt;

&lt;p&gt;In his latest blog post he introduced &lt;a href="https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/"&gt;306 Million Freely Downloadable Pwned Passwords&lt;/a&gt; with an update of another 14 Million just on the following day. He also has setup a online search at &lt;a href="https://haveibeenpwned.com/Passwords"&gt;https://haveibeenpwned.com/Passwords&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can enter passwords and check if they have been compromised. &lt;strong&gt;But do not enter actively used passwords here&lt;/strong&gt;, even if Troy is a nice person living in sunny Australia.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/08/pwned-passwords.png" alt="Pwned Passwords online service"&gt;&lt;/p&gt;

&lt;p&gt;My recommendation is&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you are in doubt if your password has been pwned, just &lt;strong&gt;change it first&lt;/strong&gt; and then check the old one in the online form.  &lt;/li&gt;
&lt;li&gt;Use a &lt;strong&gt;Password manager&lt;/strong&gt; like 1Password to create an individual long random password &lt;strong&gt;for each service&lt;/strong&gt; you use.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But the huge password list is still quite interesting to work with.&lt;/p&gt;

&lt;h2 id="letsbuildalocalsearch"&gt;Let's build a local search&lt;/h2&gt;

&lt;p&gt;What you can do is download the list of passwords (about 5 GByte compressed) and search locally in a safe place. You won't get the cleartext passwords, but only SHA1 sums of them. But we can create SHA1 sums of the passwords we want to search in this huge list.&lt;/p&gt;

&lt;p&gt;You can download the files that are compressed with 7-Zip. You also need a tool to create a SHA1 sum of a plain text. And then you need another tool, a database or algorithm to quickly search in that text file that has nearly 320 Million lines.&lt;/p&gt;

&lt;h2 id="usedockerforthetask"&gt;Use Docker for the task&lt;/h2&gt;

&lt;p&gt;I immediately thought of a Container that has all these tools installed. But I didn't want to add the huge password lists into that container as it would build a Docker image of about 12 GByte or probably 5-6 GB Docker image on the Docker Hub.&lt;/p&gt;

&lt;p&gt;The password files should be persisted locally on your laptop and mounted into the container to search in them with the tools needed for the task.&lt;/p&gt;

&lt;p&gt;And I want to use some simple tools to get the work done. A first idea was born in the comments of Troys blog post where someone showed a small bash script with &lt;code&gt;grep&lt;/code&gt; to search in the file.&lt;/p&gt;

&lt;p&gt;I first tried &lt;code&gt;grep&lt;/code&gt;, but this took about 2 minutes to find the hash in the file. So I searched a little bit and found &lt;a href="http://sgrep.sourceforge.net"&gt;&lt;code&gt;sgrep&lt;/code&gt;&lt;/a&gt; - a tool to grep in sorted files. Luckily the password files are sorted by the SHA1 hash. But I found only the source code and there is no standard package to install it. So we also need a C compiler for that.&lt;/p&gt;

&lt;p&gt;In times before Docker you had a lot of stress installing many tools on your computer. But let's see how Docker can help us with all these steps.&lt;/p&gt;

&lt;h2 id="buildthedockerimage"&gt;Build the Docker image&lt;/h2&gt;

&lt;p&gt;I found the Sources of sgrep on &lt;a href="https://github.com/colinscape/sgrep"&gt;GitHub&lt;/a&gt; and we will need Make and a C compiler to build the &lt;code&gt;sgrep&lt;/code&gt; binary.&lt;/p&gt;

&lt;p&gt;I will use a &lt;strong&gt;multi-stage build&lt;/strong&gt; Dockerfile and explain every single line. You can build the image line by line and see the benefits of build caches while working on the &lt;code&gt;Dockerfile&lt;/code&gt;. So after adding a line to the file you can run &lt;code&gt;docker build -t pwned-passwords .&lt;/code&gt; to build and update the image.&lt;/p&gt;

&lt;p&gt;For the beginning let's choose a small Linux base image. We will name the first stage as &lt;code&gt;build&lt;/code&gt;. So the &lt;code&gt;Dockerfile&lt;/code&gt; starts with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM alpine:3.6 AS build  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is we have to install Git, Make and the C compiler with its header files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN apk update &amp;amp;&amp;amp; apk add git make gcc musl-dev  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we clone the GitHub repo with the source code of sgrep.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN git clone https://github.com/colinscape/sgrep  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the next line I'll create a bin folder that is needed for the build process. Then we go to the source directory and run the &lt;code&gt;make&lt;/code&gt; command as there is a &lt;code&gt;Makefile&lt;/code&gt; in that directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN mkdir sgrep/bin &amp;amp;&amp;amp; cd sgrep/src &amp;amp;&amp;amp; make  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After these steps we have the &lt;code&gt;sgrep&lt;/code&gt; binary compiled for Alpine Linux. But we also have installed a ton of other tools.&lt;/p&gt;

&lt;p&gt;Now put all these instructions into a &lt;code&gt;Dockerfile&lt;/code&gt; and build the Docker image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker build -t pwned-passwords .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's inspect all image layers we have created so far.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker history pwned-passwords
IMAGE               CREATED             CREATED BY                                      SIZE  
78171a118279        12 hours ago        /bin/sh -c mkdir sgrep/bin &amp;amp;&amp;amp; cd sgrep/src...   24.5kB  
2323bcb14b5f        12 hours ago        /bin/sh -c git clone https://github.com/co...   93.6kB  
8ec1470030af        12 hours ago        /bin/sh -c apk update &amp;amp;&amp;amp; apk add git make ...   119MB  
7328f6f8b418        5 weeks ago         /bin/sh -c #(nop)  CMD ["/bin/sh"]              0B  
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop) ADD file:4583e12bf5caec4...   3.97MB  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see we now have a Docker image of more than 120 MByte, but the &lt;code&gt;sgrep&lt;/code&gt; binary is only 15 KByte. Yes, this is no typo. Yes, we will grep through GByte of data with a tiny 15 KByte binary.&lt;/p&gt;

&lt;h2 id="multistagebuildforthewin"&gt;Multi-stage build for the win&lt;/h2&gt;

&lt;p&gt;With Docker 17.05 and newer you can now add another &lt;code&gt;FROM&lt;/code&gt; instruction and start with a new stage in your &lt;code&gt;Dockerfile&lt;/code&gt;. The last stage will create the final Docker image. So every instruction after the last &lt;code&gt;FROM&lt;/code&gt; defines what goes into the image you want to share eg. on Docker Hub.&lt;/p&gt;

&lt;p&gt;So let's start our final stage of our Docker image build with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM alpine:3.6  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last stage does not need a name. Now we have an empty Alpine Linux again, all the 120 MByte of development environment won't make it into the final image. But if you build the Docker image more than once the temporary layers are still there and will be reused if they are unmodified. So the Docker build cache helps you speed up while working on the shell script.&lt;/p&gt;

&lt;p&gt;In the previous build stage we have created the much faster &lt;code&gt;sgrep&lt;/code&gt; command. What we now need is a small shell script that converts a plaintext password into a SHA1 sum and runs the &lt;code&gt;sgrep&lt;/code&gt; command. &lt;/p&gt;

&lt;p&gt;To create a SHA1 sum I'll use &lt;code&gt;openssl&lt;/code&gt; command. And it would be nice if the shell script can download the huge files for us. As the files are compressed with 7-zip we also need &lt;code&gt;wget&lt;/code&gt; to download and &lt;code&gt;7z&lt;/code&gt; to extract them.&lt;/p&gt;

&lt;p&gt;In the next instruction we install OpenSSL and the 7-Zip tool.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN apk update &amp;amp;&amp;amp; apk add openssl p7zip  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;COPY&lt;/code&gt; instruction has an option &lt;code&gt;--from&lt;/code&gt; where you can specify another named stage of your build. So we copy the compiled &lt;code&gt;sgrep&lt;/code&gt; binary from the &lt;code&gt;build&lt;/code&gt; stage into the local bin directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;COPY --from=build /sgrep/bin/sgrep /usr/local/bin/sgrep  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The complete shell script is called &lt;code&gt;search&lt;/code&gt; and can be found in &lt;a href="https://github.com/StefanScherer/pwned-passwords"&gt;my pwned-passwords&lt;/a&gt; GitHub repo. Just assume we have it in the current directory. The next &lt;code&gt;COPY&lt;/code&gt; instruction copies it from your real machine into the image layer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;COPY search /usr/local/bin/search  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the last line of the &lt;code&gt;Dockerfile&lt;/code&gt; we define an entrypoint to run this shell script if we run the Docker container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ENTRYPOINT ["/usr/local/bin/search"]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now append these lines to the &lt;code&gt;Dockerfile&lt;/code&gt; and build the complete image. You will see that the first layers are already cached and only the last stage will be built.&lt;/p&gt;

&lt;h3 id="thesearchscript"&gt;The search script&lt;/h3&gt;

&lt;p&gt;You can find the &lt;a href="https://github.com/StefanScherer/pwned-passwords/blob/master/search"&gt;&lt;code&gt;search&lt;/code&gt; script&lt;/a&gt; in my GitHub repo as well as the &lt;code&gt;Dockerfile&lt;/code&gt;. You only need these two tiny files to build the Docker image yourself.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
set -e

if [ ! -d /data ]; then  
  echo "Please run this container with a volume mounted at /data."
  echo "docker run --rm -v \ $(pwd):/data pwned-passwords $*"
  exit 1
fi

FILES="pwned-passwords-1.0.txt pwned-passwords-update-1.txt"  
for i in $FILES  
do  
  if [ ! -f "/data/$i" ]; then
    echo "Downloading $i"
    wget -O "/tmp/$i.7z" "https://downloads.pwnedpasswords.com/passwords/$i.7z"
    echo "Extracting $i to /data"
    7z x -o/data "/tmp/$i.7z"
    rm "/tmp/$i.7z"
  fi
done

if [[ $1 != "" ]]  
then  
PWD=$1  
else  
PWD="password"  
echo "checking $PWD"  
fi

hash=`echo -n $PWD | openssl sha1 | awk '{print $2}' | awk 'BEGIN { getline; print toupper($0)  }'`  
echo "Hash is $hash"  
totalcount=0  
for i in $(sgrep -c $hash /data/*.txt)  
do  
  file=$(echo "$i" | cut -f1 -d:)
  count=$(echo "$i" | cut -f2 -d:)
  if [[ $count -ne 0 ]]; then
    echo "Oh no - pwned! Found $count occurences in $file"
  fi
  totalcount=$(( $totalcount + $count ))
done  
if [[ $totalcount -eq 0 ]]; then  
  echo "Good news - no pwnage found!"
else  
  exit 1
fi  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="buildthefinalimage"&gt;Build the final image&lt;/h2&gt;

&lt;p&gt;Now with these two files, &lt;code&gt;Dockerfile&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; shell script build the small Docker image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker build -t pwned-passwords .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's have a look at the final image layers with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker history pwned-passwords
IMAGE               CREATED             CREATED BY                                      SIZE  
e63a6121fe33        3 minutes ago       /bin/sh -c #(nop)  ENTRYPOINT ["/usr/local...   0B  
9a7db1341995        3 minutes ago       /bin/sh -c #(nop) COPY file:b098e8cba82eef...   1.08kB  
a1f4a26a50a4        About an hour ago   /bin/sh -c #(nop) COPY file:bf96562251dbd1...   15.7kB  
f99b3a9601ea        About an hour ago   /bin/sh -c apk update &amp;amp;&amp;amp; apk add openssl p...   10.7MB  
7328f6f8b418        5 weeks ago         /bin/sh -c #(nop)  CMD ["/bin/sh"]              0B  
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop) ADD file:4583e12bf5caec4...   3.97MB  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, OpenSSL and 7-Zip take about 10 MByte, the 16 KByte sgrep binary and the 1 KByte shell script are sitting on top of the 4 MByte Alpine base image.&lt;/p&gt;

&lt;p&gt;I also have pushed this image to the &lt;a href="https://hub.docker.com/r/stefanscherer/pwned-passwords/"&gt;Docker Hub&lt;/a&gt; with a compressed size of about 7 MByte. If you trust me, you can use this Docker image as well. But you will learn more how multi-stage builds feel like if you build the image yourself.&lt;/p&gt;

&lt;h2 id="searchforpwnedpasswords"&gt;Search for pwned passwords&lt;/h2&gt;

&lt;p&gt;We now have a small 14.7 MByte Linux Docker image to search for pwned passwords.&lt;/p&gt;

&lt;p&gt;Run the container with a folder mounted to &lt;code&gt;/data&lt;/code&gt;. If you forgot this, the script will show you how to run it.&lt;/p&gt;

&lt;p&gt;Running the container for the first time it will download the two password files (5 GByte) which may take some minutes depending on your internet connectivity.&lt;/p&gt;

&lt;p&gt;After the script has downloaded everything two files should appear in the current folder. For me it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/08/list.png" alt="file list"&gt;&lt;/p&gt;

&lt;p&gt;Now search for passwords by adding a plaintext password as an argument  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -v $(pwd):/data pwned-passwords troyhunt
Hash is 0CCE6A0DD219810B5964369F90A94BB52B056494  
Oh no - pwned! Found 1 occurences in /data/pwned-passwords-1.0.txt  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don't trust my script or the &lt;code&gt;sgrep&lt;/code&gt; command, the run the container without network connectivity&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -v $(pwd):/data --network none pwned-passwords secret4949
Hash is 6D26C5C10FF089BFE81AB22152E2C0F31C58E132  
Good news - no pwnage found!  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So you have luck, you can securely check that your password &lt;code&gt;secure4949&lt;/code&gt; hasn't been breached. But beware this is still no good password :-)&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/08/mac.png" alt="Run pwned-passwords"&gt;&lt;/p&gt;

&lt;h2 id="worksonwindows"&gt;Works on Windows&lt;/h2&gt;

&lt;p&gt;If you have Docker installed on your Windows machine, you can also use my Docker image or build the image yourself.&lt;/p&gt;

&lt;p&gt;On my Windows 7 machine I have to use Docker Machine, but even here you can easily search for pwned passwords. All you have to do is mount a directory for the password files as &lt;code&gt;/data&lt;/code&gt; into the container.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -v "/c/Users/stefan.scherer/pwned:/data" stefanscherer/pwned-passwords troyhunt  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/08/win7.png" alt="Windows 7 with pwned-passwords image"&gt;&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;You now know that there are Millions of passwords out there that may be used in a brute force attack to other online services.&lt;/p&gt;

&lt;p&gt;So please use a password manager instead of predictable patterns how to modify passwords for different services.&lt;/p&gt;

&lt;p&gt;You also have learned how Docker can keep your computer clean but still compile some open source projects from source code.&lt;/p&gt;

&lt;p&gt;You have seen the benefits of multi-stage builds to create and share minimal Docker images without the development environment.&lt;/p&gt;

&lt;p&gt;And you now have the possibility to search your current passwords in a save place without leaking it to the internet. Some other online service may collect all the data entered into a form. So keep your passwords secret and change &lt;/p&gt;

&lt;p&gt;If you want to hear more about Docker, follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;. &lt;/p&gt;</content:encoded></item><item><title>Exploring new NanoServer Insider images</title><description>&lt;p&gt;Last week the first Insider preview container images appeared on the Docker Hub. They promise us much smaller sizes to have more lightweight Windows images for our applications.&lt;/p&gt;

&lt;p&gt;To use these Insider container images you also need an Insider preview of Windows Server 2016 or Windows 10. Yes, this is&lt;/p&gt;</description><link>https://stefanscherer.github.io/exploring-new-nanoserver-insider-images/</link><guid isPermaLink="false">1f99a5ec-2825-4c1f-ba42-8bd6b881e63d</guid><category>Docker</category><category>Windows</category><category>Nano Server</category><category>Node.js</category><category>Vagrant</category><category>Packer</category><category>Docker Hub</category><category>Insider</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Tue, 18 Jul 2017 09:42:41 GMT</pubDate><content:encoded>&lt;p&gt;Last week the first Insider preview container images appeared on the Docker Hub. They promise us much smaller sizes to have more lightweight Windows images for our applications.&lt;/p&gt;

&lt;p&gt;To use these Insider container images you also need an Insider preview of Windows Server 2016 or Windows 10. Yes, this is another great announcement that you can get early access and give feedback to the upcoming version of Windows Server. So let's grab it.&lt;/p&gt;

&lt;h2 id="windowsserverinsider"&gt;Windows Server Insider&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Register at Windows Insider program &lt;a href="https://insider.windows.com"&gt;https://insider.windows.com&lt;/a&gt; and join the Windows Server Insider program.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download the Windows Server Insider preview ISO from &lt;a href="https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewserver"&gt;https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewserver&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you can create a VM and install Docker. You can either build the VM manually and follow the docs &lt;a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/using-insider-container-images"&gt;"Using Insider Container Images"&lt;/a&gt; how to install Docker and pull the Insider container images. Or you can use my Packer template and Vagrant environment to automate these steps. The walkthrough is described at&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/StefanScherer/insider-docker-machine"&gt;https://github.com/StefanScherer/insider-docker-machine&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="windowsinsiderimages"&gt;Windows Insider images&lt;/h2&gt;

&lt;p&gt;There are four new Docker images available with a much smaller footprint.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/07/windows_insider_images.png" alt="Windows Insider images"&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;microsoft/windowsservercore-insider&lt;/li&gt;
&lt;li&gt;microsoft/nanoserver-insider&lt;/li&gt;
&lt;li&gt;microsoft/nanoserver-insider-dotnet&lt;/li&gt;
&lt;li&gt;microsoft/nanoserver-insider-powershell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Windows Server Core Insider image got down from 5 GB to only 2 GB which saves a lot of bandwidth and download time.&lt;/p&gt;

&lt;p&gt;You may wonder why there are three Nano Server Insider images and why there is one without PowerShell.&lt;/p&gt;

&lt;h2 id="aimingthesmallestwindowsbaseimage"&gt;Aiming the smallest Windows base image&lt;/h2&gt;

&lt;p&gt;If we compare the image sizes of the current &lt;code&gt;microsoft/nanoserver&lt;/code&gt; image with its base layer and update layer with the new Insider images you can see the reason.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/07/nanoserver_sizes.png" alt="NanoServer sizes"&gt;&lt;/p&gt;

&lt;p&gt;If you want to ship your application in a container image you don't want to ship a whole operating system, but only the parts needed to run the application.&lt;/p&gt;

&lt;p&gt;And to ship faster is to ship smaller images. For many applications you do not need eg. PowerShell inside your base image at runtime which would take another 54 MByte to download from the Docker registry.&lt;/p&gt;

&lt;p&gt;Let's have a look at current Windows Docker images available on the Docker Hub. To run a Golang webserver for example on an empty Windows Docker host you have to pull the 2MB binary and the two NanoServer base layers with hundreds of MB to run it in a container.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/07/docker-pull-whoami.png" alt="docker pull whoami"&gt;&lt;/p&gt;

&lt;p&gt;Of course these base images have to be downloaded only once as other NanoServer container images will use the same base image. But if you work with Windows containers for a longer time you may have noticed that you still have to download different update layers from time to time that pull another 122 MB.&lt;/p&gt;

&lt;p&gt;And if the NanoServer base image is much smaller then the updates also will be smaller and faster to download.&lt;/p&gt;

&lt;p&gt;With the new Insider container images you can build and run containerized .NET core applications that are still smaller than the NanoServer + PowerShell base image.&lt;/p&gt;

&lt;h2 id="nodejs"&gt;Node.js&lt;/h2&gt;

&lt;p&gt;Another example is providing a Node.js container image based on the new NanoServer Insider image with only 92 MByte. We have just cut off "3" hundred MB.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/07/nodejs_nanoserver_sizes-3.png" alt="Node.js NanoServer sizes"&gt;&lt;/p&gt;

&lt;p&gt;If we compare that with some of the Linux Node.js container images we are at about the size of the the slim images.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/07/Bildschirmfoto-2017-07-14-um-08.53.24.png" alt="Node.js slim image sizes"&gt;&lt;/p&gt;

&lt;h2 id="multistagebuild"&gt;Multi-stage build&lt;/h2&gt;

&lt;p&gt;To build such small Windows images comes with a cost. You have to live without PowerShell. But the new multi-stage build introduced with Docker 17.05 really helps you and you can use PowerShell before the final image layers are built.&lt;/p&gt;

&lt;p&gt;If you haven't heard about multi-stage builds its concept is to have multiple &lt;code&gt;FROM&lt;/code&gt; instructions in a &lt;code&gt;Dockerfile&lt;/code&gt;. Only the last &lt;code&gt;FROM&lt;/code&gt; until the end of the file will build the final container image. This is also called the last stage. In all the other stages you don't have to optimze too much and can use the build cache much better. You can read more about &lt;a href="https://blog.docker.com/2017/07/multi-stage-builds/"&gt;multi-stage builds&lt;/a&gt; at the Docker Blog.&lt;/p&gt;

&lt;p&gt;Let's have a closer look how to build a small Node.js base image. You can find the complete &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/07cedcf2cc93e669bba9c961121feda6f43dab59/node/8.1/nano/Dockerfile"&gt;Dockerfile&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;p&gt;In the first stage I'm lazy and even use the &lt;code&gt;microsoft/windowsservercore-insider&lt;/code&gt; image. The reason is that I'm using the GPG tools to verify the downloads and these tools don't run quiet well in NanoServer at the moment. &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;# escape=`
FROM microsoft/windowsservercore-insider as download  
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]  
RUN Invoke-WebRequest ...  
RUN Expand-Archive ...  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; has a second &lt;code&gt;FROM&lt;/code&gt; instruction which then uses the smallest Windows base image. In that stage you normally &lt;code&gt;COPY&lt;/code&gt; deploy files and folders from previous stages. In our case we copy the Node.js installation folder into the final image.&lt;/p&gt;

&lt;p&gt;The one &lt;code&gt;RUN&lt;/code&gt; instruction sets the &lt;code&gt;PATH&lt;/code&gt; environment variable with the &lt;code&gt;setx&lt;/code&gt; command instead of PowerShell commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM microsoft/nanoserver-insider  
ENV NPM_CONFIG_LOGLEVEL info  
COPY --from=download /nodejs /nodejs  
RUN setx PATH "%PATH%;C:\nodejs;%APPDATA%\npm"  
CMD [ "node.exe" ]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Users of such a Node.js base image can work as usual by &lt;code&gt;COPY&lt;/code&gt; deploy their source tree and node_modules folder into that image and run the application as a small container.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM stefanscherer/node-windows:8.1.4-insider  
WORKDIR /code  
COPY . /code  
CMD ["node.exe", "app.js"]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So all you have to do is change the &lt;code&gt;FROM&lt;/code&gt; instruction to the smaller insider Node.js image.&lt;/p&gt;

&lt;h2 id="furtherinsiderimages"&gt;Further Insider images&lt;/h2&gt;

&lt;p&gt;I have pushed some of my first Insider images to the Docker Hub so it may be easier for you to try out different languages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stefanscherer/node-windows:6.11.1-insider&lt;/li&gt;
&lt;li&gt;stefanscherer/node-windows:8.1.4-insider&lt;/li&gt;
&lt;li&gt;stefanscherer/golang-windows:1.8.3-insider&lt;/li&gt;
&lt;li&gt;stefanscherer/dockertls-windows:insider&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to see how these images are built, then you can find the &lt;code&gt;Dockerfiles&lt;/code&gt; in the latest pull requests of my &lt;a href="https://github.com/StefanScherer/dockerfiles-windows"&gt;https://github.com/StefanScherer/dockerfiles-windows&lt;/a&gt; repo.&lt;/p&gt;

&lt;h2 id="dockervolumes"&gt;Docker Volumes&lt;/h2&gt;

&lt;p&gt;If you have worked with Docker Volumes on Windows you may know this already. Node.js and other tools and languages have problems when they want to get the real name of a file or folder that is mapping from the Docker host into the container.&lt;/p&gt;

&lt;p&gt;Node.js for example thinks the file is in the folder &lt;code&gt;C:\ContainerMappedDirectories&lt;/code&gt;, but cannot find the file there. There is a workaround described in Elton Stoneman's blog post &lt;a href="https://blog.sixeyed.com/docker-volumes-on-windows-the-case-of-the-g-drive/"&gt;"Introducing the 'G' Drive"&lt;/a&gt; to map it to another drive letter.&lt;/p&gt;

&lt;p&gt;With the new Insider preview I see a great improvement on that topic. Running normal Windows containers without the HyperV isolation there is no longer a symbolic link.&lt;/p&gt;

&lt;p&gt;If we run the Node.js container interactively and map the folder &lt;code&gt;C:\code&lt;/code&gt; into the container we can list the &lt;code&gt;C:&lt;/code&gt;drive and see that the &lt;code&gt;code&lt;/code&gt; folder is a normal directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -v C:\code:C:\code stefanscherer/node-windows:8.1.4-insider cmd /c dir  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/07/docker-run-nodejs.png-shadow.png" alt="docker run volume"&gt;&lt;/p&gt;

&lt;p&gt;With this setup you are able to mount your source code into the Node.js container and run it eg. with &lt;code&gt;nodemon&lt;/code&gt; to live reload it after changing it on the host.&lt;/p&gt;

&lt;p&gt;Unfortunately this is not available with the Hyper-V isolation that is the default on Windows 10 Insider machines.&lt;/p&gt;

&lt;p&gt;Running the same command with &lt;code&gt;--isolation=hyperv&lt;/code&gt; shows the symlinked directory which Node.js cannot handle at the moment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -v C:\code:C:\code --isolation=hyperv stefanscherer/node-windows:8.1.4-insider cmd /c dir  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/07/docker-run-nodejs-hyperv.png-shadow.png" alt="docker run volume hyperv"&gt;&lt;/p&gt;

&lt;p&gt;But this improvement in native Windows containers looks very promising to solve a lot of headache for all the maintainers of Git for Windows, Golang, Node.js and so on.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Having smaller Windows container images is a huge step forward. I encourage you to try out the much smaller images. You'll learn how it feels to work with them and you can give valuable feedback to the Microsoft Containers team shaping the next version of Windows Server.&lt;/p&gt;

&lt;p&gt;Can we make even smaller images? I don't know, but let's find it out. How about naming the new images? Please make suggestions at the Microsoft Tech Community &lt;a href="https://techcommunity.microsoft.com"&gt;https://techcommunity.microsoft.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please use the comments below if you have further ideas, questions or improvements to share. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt; to stay up to date with Windows containers.&lt;/p&gt;</content:encoded></item><item><title>Use multi-stage builds for smaller Windows images</title><description>&lt;p&gt;I'm still here in Austin, TX at DockerCon 2017 and I want to show you one of the announcements that is very useful to build small Windows Docker images.&lt;/p&gt;

&lt;p&gt;On Tuesday's first keynote at DockerCon Solomon Hykes introduced the most impressive feature for me that will make it in version&lt;/p&gt;</description><link>https://stefanscherer.github.io/use-multi-stage-builds-for-smaller-windows-images/</link><guid isPermaLink="false">5ccd5961-b320-4a2d-845b-af5e6c61894c</guid><category>Docker</category><category>windows-containers</category><category>multi-stage</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Wed, 19 Apr 2017 22:52:00 GMT</pubDate><content:encoded>&lt;p&gt;I'm still here in Austin, TX at DockerCon 2017 and I want to show you one of the announcements that is very useful to build small Windows Docker images.&lt;/p&gt;

&lt;p&gt;On Tuesday's first keynote at DockerCon Solomon Hykes introduced the most impressive feature for me that will make it in version 17.05.0 of Docker: &lt;strong&gt;The multi-stage builds&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/04/multi-stage-build.jpg" alt="announcement at DockerCon about multi-stage builds"&gt;&lt;/p&gt;

&lt;p&gt;The demo in the keynote only showed Linux images, but you can use this feature for Windows images as well.&lt;/p&gt;

&lt;h2 id="howdidwebuildsmallerimagesinthepast"&gt;How did we build smaller images in the past?&lt;/h2&gt;

&lt;p&gt;As we know each instruction in a &lt;code&gt;Dockerfile&lt;/code&gt; like &lt;code&gt;COPY&lt;/code&gt; or &lt;code&gt;RUN&lt;/code&gt; builds a new layer of the image. So everything you do in eg. a &lt;code&gt;RUN&lt;/code&gt; instruction is atomic and saved into one layer. It was a common practise to use multi-line &lt;code&gt;RUN&lt;/code&gt; instructions to clean up temporary files and cache folders before that instruction ends to minimize the size of that layer.&lt;/p&gt;

&lt;p&gt;For me it always looked like a workaround and a little too technical to know where all these temporary files have to be wiped out. So it is great to remove this noise out of your Dockerfiles.&lt;/p&gt;

&lt;p&gt;And another workaround that was used in addition was to create two Dockerfiles and a script to simulate such stages and copy files from the first Docker image back to the host and then into the second Docker image. This could lead to errors if you have old temp folders on your host where you copy the results from the first build in. So it will be good that we can remove this complexity and avoid such build scripts entirely.&lt;/p&gt;

&lt;h2 id="multistagebuildonwindows"&gt;Multi-stage build on Windows&lt;/h2&gt;

&lt;p&gt;The idea behind multi-stage builds is that you can define two or more build stages and only the layers of the last stage gets into the final Docker image.&lt;/p&gt;

&lt;h3 id="thefirststage"&gt;The first stage&lt;/h3&gt;

&lt;p&gt;As you can see in the nice slide you can start with a first stage and do what you like in there. Maybe you need a &lt;strong&gt;complete build environment&lt;/strong&gt; like MSBuild, or the Golang compiler or dev dependencies to run Node.js tests with your sources.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;FROM&lt;/code&gt; instruction now can be followed by a stage name, eg. &lt;code&gt;build&lt;/code&gt;. I recommend to introduce that to your &lt;code&gt;Dockefile&lt;/code&gt; as we will need this name later again. This is how your Dockerfile then could look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM microsoft/windowsservercore as build  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You do not need to use multi-line &lt;code&gt;RUN&lt;/code&gt; instructions any more if you haven't liked it. Just keep your Dockerfile &lt;strong&gt;simple, readable and maintainable&lt;/strong&gt; by your team colleages. The advantage that even you have is that you can use the Docker build cache much better.&lt;/p&gt;

&lt;p&gt;Think of a giant multi-line &lt;code&gt;RUN&lt;/code&gt; instruction with three big downloads, uncompress and cleanup steps and the third download crashes due to internet connectivity. Then you have to do all the other downloads again if you start the &lt;code&gt;docker build&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;So relax and just download one file per &lt;code&gt;RUN&lt;/code&gt; instruction, even put the uncompress into another &lt;code&gt;RUN&lt;/code&gt; layer, it doesn't matter for the final image size.&lt;/p&gt;

&lt;h3 id="thelaststage"&gt;The last stage&lt;/h3&gt;

&lt;p&gt;The magic comes into the &lt;code&gt;Dockerfile&lt;/code&gt; as you can use more than one &lt;code&gt;FROM&lt;/code&gt; instructions. Each &lt;code&gt;FROM&lt;/code&gt; starts a new build stage and all lines beginning from the last &lt;code&gt;FROM&lt;/code&gt; will make it into the final Docker image. The last stage does not need to have a name like the previous ones.&lt;/p&gt;

&lt;p&gt;In this last stage you define the &lt;strong&gt;minimal runtime environment&lt;/strong&gt; for your containerised application.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;COPY&lt;/code&gt; instruction now has a new option &lt;code&gt;--from&lt;/code&gt; where you can specify from with stage you want to copy files or directories into the current stage.&lt;/p&gt;

&lt;p&gt;Enough theory. Let's have a look at some real use-cases I already tried out.&lt;/p&gt;

&lt;h2 id="buildagolangprogram"&gt;Build a Golang program&lt;/h2&gt;

&lt;p&gt;A simple multi-stage &lt;code&gt;Dockerfile&lt;/code&gt; to build a Golang binary from source could look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM golang:nanoserver as gobuild  
COPY . /code  
WORKDIR /code  
RUN go build webserver.go

FROM microsoft/nanoserver  
COPY --from=gobuild /code/webserver.exe /webserver.exe  
EXPOSE 8080  
CMD ["\\webserver.exe"]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first four lines describe the normal build. We copy the source codes into the Golang build environment and build the Windows binary with it.&lt;/p&gt;

&lt;p&gt;Then with the second &lt;code&gt;FROM&lt;/code&gt; instruction we choose an empty NanoServer image. With this we skip about 100 MByte of compressed Golang build environment images for the production image.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;COPY --from=gobuild&lt;/code&gt; instruction copies the final Windows binary from the gobuild stage into the final stage.&lt;/p&gt;

&lt;p&gt;The last two lines are just the normal things you do, expose the port on which your app is listening and describing the command that should be called when running a container with it.&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;Dockerfile&lt;/code&gt; now can be easily be built as always with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t webserver .  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The final Docker image only has a 2 MByte compressed layer in addition to the NanoServer base layers.&lt;/p&gt;

&lt;p&gt;You can find a full example for such a simple Golang webserver in my &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/tree/master/webserver"&gt;dockerfiles-windows&lt;/a&gt; repo, the final Docker Hub image is available at &lt;a href="https://hub.docker.com/r/stefanscherer/whoami/tags/"&gt;&lt;code&gt;stefanscherer/whoami:windows-amd64-1.2.0&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="installmongodbmsiinnanoserver"&gt;Install MongoDB MSI in NanoServer&lt;/h2&gt;

&lt;p&gt;Another example for this multi-stage build is that you can use it to &lt;strong&gt;install MSI packages&lt;/strong&gt; and put the installed programs and files &lt;strong&gt;into a NanoServer&lt;/strong&gt; image.&lt;/p&gt;

&lt;p&gt;Well, you cannot install MSI packages in NanoServer directly, but you can &lt;strong&gt;start with the Windows Server Core&lt;/strong&gt; image in the build stage and &lt;strong&gt;then switch to NanoServer&lt;/strong&gt; in the final stage.&lt;/p&gt;

&lt;p&gt;If you know where the software has been installed you can &lt;code&gt;COPY&lt;/code&gt; deploy them in the final stage into the image.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; how to build a MongoDB NanoServer image is also available &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/142debf6ddeb9f5fb57d2d472ebf166a32dbcc87/mongo/3.4/Dockerfile"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/142debf6ddeb9f5fb57d2d472ebf166a32dbcc87/mongo/3.4/Dockerfile#L1-L18"&gt;first stage&lt;/a&gt; more or less looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM microsoft/windowsservercore as msi  
RUN "download MSI page"  
RUN "check SHA sum of download"  
RUN "run MSI installer"  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/142debf6ddeb9f5fb57d2d472ebf166a32dbcc87/mongo/3.4/Dockerfile#L20-L32"&gt;final stage&lt;/a&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM microsoft/nanoserver  
COPY --from=msi C:\mongodb\ C:\mongodb\  
...
RUN "put MongoDB binaries into PATH"  
VOLUME C:\data\db  
EXPOSE 27017  
CMD ["mongod.exe"]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another pro tip: If you really want small Windows Docker images you should also avoid &lt;code&gt;RUN&lt;/code&gt; or &lt;code&gt;ENV&lt;/code&gt; instructions in the last stage.&lt;/p&gt;

&lt;p&gt;The final MongoDB NanoServer image is available at &lt;a href="https://hub.docker.com/r/stefanscherer/mongo-windows/tags/"&gt;&lt;code&gt;stefanscherer/mongo-windows:3.4.2-nano&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With multi-stage builds coming into Docker 17.05 we will be able to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;put all build stages into a single Dockerfile to use only one simple &lt;code&gt;docker build&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;use the build cache by using single line &lt;code&gt;RUN&lt;/code&gt; instructions&lt;/li&gt;
&lt;li&gt;start with ServerCore, then switch to NanoServer&lt;/li&gt;
&lt;li&gt;use latest NanoServer image with all security updates installed for the last stage even if upstream build layer may be out of date&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This gives you an idea what you will be able to do once you have Docker 17.05 or later installed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 2017-05-07&lt;/strong&gt;: I build all my &lt;a href="https://github.com/StefanScherer/dockerfiles-windows"&gt;dockerfiles-windows&lt;/a&gt; Windows Docker images with &lt;a href="https://www.appveyor.com"&gt;AppVeyor&lt;/a&gt; and it is very easy to upgrade to Docker 17.05.0-ce during the build with the script &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/d1c01effe957281f72a762914b7fae36bdf49c15/update-docker-ce.ps1"&gt;&lt;code&gt;update-docker-ce.ps1&lt;/code&gt;&lt;/a&gt;. For local Windows Server 2016 VM's you could use this script as well. Sure, at the moment we have to switch from EE to CE edition until 17.06.0-ee also will bring this feature. Your images will still run on 17.03.1-ee production servers.&lt;/p&gt;

&lt;p&gt;Please use the comments below if you have further ideas, questions or improvements to share. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Yes, you can "Docker" on Windows 7</title><description>&lt;p&gt;This week I was asked to help automating a task to get some Linux binaries and files packaged into a tarball. Some developers tried to spin up a Linux virtual machine and run a script to install tools and then do the packaging. Although I also like and use &lt;a href="https://www.vagrantup.com"&gt;Vagrant&lt;/a&gt;&lt;/p&gt;</description><link>https://stefanscherer.github.io/yes-you-can-docker-on-windows-7/</link><guid isPermaLink="false">6db25c32-3f03-4783-a0fb-17bb46fd6787</guid><category>Docker</category><category>Chocolatey</category><category>Windows 7</category><category>Docker Machine</category><category>VMware</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Fri, 31 Mar 2017 17:02:07 GMT</pubDate><content:encoded>&lt;p&gt;This week I was asked to help automating a task to get some Linux binaries and files packaged into a tarball. Some developers tried to spin up a Linux virtual machine and run a script to install tools and then do the packaging. Although I also like and use &lt;a href="https://www.vagrantup.com"&gt;Vagrant&lt;/a&gt; still very often, it seemed to me using &lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt; will be easier to maintain as this could be done in a one-shot container.&lt;/p&gt;

&lt;h2 id="thehardfactswindows7enterprise"&gt;The hard facts - Windows 7 Enterprise&lt;/h2&gt;

&lt;p&gt;The bigger problem was the fact that in some companies you still find Windows 7 Enterprise. It may be a delayed rollout of new notebooks that keep the employees on that old desktop platform.&lt;/p&gt;

&lt;p&gt;So using &lt;a href="https://docs.docker.com/docker-for-windows/"&gt;Docker for Windows&lt;/a&gt; was no option as it only works with Windows 10 Pro with Hyper-V. This looks like a good setup for new notebooks, but if you want to use Docker &lt;em&gt;now&lt;/em&gt; you have to look for other solutions.&lt;/p&gt;

&lt;h2 id="lockedinhypervisor"&gt;Locked-in Hypervisor&lt;/h2&gt;

&lt;p&gt;Next obstacle was that for Vagrant it is better to use &lt;strong&gt;VMware Workstation&lt;/strong&gt; on Windows 7 instead of VirtualBox. There also may be a company policy to use one specific hypervisor as the knowledge is already there using other server products in the datacenter.&lt;/p&gt;

&lt;p&gt;So going down to the &lt;a href="https://www.docker.com/products/docker-toolbox"&gt;Docker Toolbox&lt;/a&gt; also was no option as it comes with VirtualBox to run the Linux boot2docker VM.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="de"&gt;&lt;p lang="en" dir="ltr"&gt;Can&amp;#39;t Believe this..GOT THIS GIF from my Kid :) &lt;a href="https://twitter.com/docker"&gt;@docker&lt;/a&gt; ..Amazing ! &lt;a href="https://t.co/f09henl5Ta"&gt;pic.twitter.com/f09henl5Ta&lt;/a&gt;&lt;/p&gt;&amp;mdash; Ajeet Singh Raina (@ajeetsraina) &lt;a href="https://twitter.com/ajeetsraina/status/847737267510591488"&gt;31. März 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id="embraceyourenvironment"&gt;Embrace your environment&lt;/h2&gt;

&lt;p&gt;So we went with a manual installation of some Docker tools to get a Linux Docker VM running on the Windows 7 machine. Luckily the developers already had the &lt;a href="https://chocolatey.org"&gt;Chocolatey&lt;/a&gt; package manager installed.&lt;/p&gt;

&lt;p&gt;Let's recap what I found on the notebooks&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows 7 Enterprise&lt;/li&gt;
&lt;li&gt;VMware Workstation 9/10/11/12&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well there is a tool Docker Machine to create local Docker VM's very easily, and there is a VMware Workstation plugin available. All these tools are also available as Chocolatey packages.&lt;/p&gt;

&lt;p&gt;So what we did on the machines was installing three packages with these simple commands in an administrator terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;choco install -y docker  
choco install -y docker-machine  
choco install -y docker-machine-vmwareworkstation  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we closed the administrator terminal as the next commands can be done in normal user mode.&lt;/p&gt;

&lt;h2 id="myhostismycastle"&gt;My host is my castle&lt;/h2&gt;

&lt;p&gt;Every developer installs tools that they need for their work. Installing that on the host machine - your desktop or notebook - leads to different machines.&lt;/p&gt;

&lt;p&gt;Creating the Docker Machine we ran into a "works on my machine, but doesn't work on your machine" problem I hadn't seen before.&lt;/p&gt;

&lt;p&gt;Something while setting up the Linux VM just went wrong. It turned out that copying the Docker TLS certs with SSH just didn't work. A deeper look on what else is installed on the host we found that some implementations of SSH clients just doesn't work very well.&lt;/p&gt;

&lt;p&gt;Luckily there is a less known option in the &lt;code&gt;docker-machine&lt;/code&gt; binary to ignore external SSH client and use the built-in implementation.&lt;/p&gt;

&lt;p&gt;With that knowledge we were able to create a VMware Docker Machine on that laptop with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine --native-ssh create -d vmwareworkstation default  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the good old PowerShell on the Windows 7 notebook helps you to use that Linux Docker VM by setting some environment variables.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine env | iex  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that you can run &lt;code&gt;docker version&lt;/code&gt; for example to retrieve client and server version which are both the up-to-date community editions&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/docker-version.png" alt="docker version"&gt;&lt;/p&gt;

&lt;p&gt;Quite exciting to be able to use that Windows 7 notebook with the latest Docker tools installed.&lt;/p&gt;

&lt;p&gt;So hopefully Docker and using containers in more and more development tasks helps to keep their notebooks clean and they &lt;strong&gt;install less tools on the host&lt;/strong&gt; and instead running more tools in containers.&lt;/p&gt;

&lt;h2 id="icancaproblem"&gt;I can C: a problem&lt;/h2&gt;

&lt;p&gt;Using that Docker Machine VM worked really well until we faced another problem. Building some Docker images we ran out of disk space. Oh no, although the Windows 7 notebooks got improved by installing a 1 TB SSD, the C: partition hasn't been increased for some historical reasons.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/facepalm.jpg" alt="Face palm"&gt;&lt;/p&gt;

&lt;p&gt;Docker Machine creates the Linux VM's in the current users home directory. This is a good idea, but having a 120 GB partition with only 7 GB left on C: we had to fix it. Taking a deep breath and embracing that environment, we came to the following solution.&lt;/p&gt;

&lt;p&gt;We destroyed the Docker Machine again (because it's so easy) and also removed the &lt;code&gt;.docker&lt;/code&gt; folder again to link it to a folder that resides on a bigger partition of the SSD.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine rm -f default  
rm $env:USERPROFILE\.docker  
mkdir D:\docker  
cmd /c mklink /J $env:USERPROFILE\.docker D:\docker  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we recreated the Docker Machine with the command from above and set the environment variables again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine --native-ssh create -d vmwareworkstation default  
docker-machine env | iex  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And hurray - it worked. The VM with its disk resides on the bigger D: drive and we don't have to set any other global environment variables.&lt;/p&gt;

&lt;p&gt;With that setup I made the developers happy. They could start using Docker without waiting for new hardware or asking their admins to resize or reformat their partitions.&lt;/p&gt;

&lt;p&gt;We soon had a small &lt;code&gt;Dockerfile&lt;/code&gt; and put the already existing provision scripts into an image. So we finished the task running a Linux container that can be thrown away more easily than a whole VM.&lt;/p&gt;

&lt;h2 id="dailywork"&gt;Daily work&lt;/h2&gt;

&lt;p&gt;To recap how to use this Docker Machine you normally do the following steps after booting your notebook.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-machine start  
docker-machine env | iex  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can work with this default Linux Docker VM.&lt;/p&gt;

&lt;h2 id="planningyourhardwareupdate"&gt;Planning your hardware update&lt;/h2&gt;

&lt;p&gt;The story ended well, but I recommended to think ahead and plan the next hardware update. So before they just get the new notebook generation they should think about which hypervisor they should use in the future.&lt;/p&gt;

&lt;p&gt;Using Windows 10 Enterprise with the built-in Hyper-V would be easier. You can run &lt;strong&gt;native Windows containers&lt;/strong&gt; with it and use &lt;strong&gt;Docker for Windows&lt;/strong&gt; to switch between Linux and Windows containers. Using Vagrant with Hyper-V also gets better and better.&lt;/p&gt;

&lt;p&gt;But if company policy still restricts you to use eg. VMware then you also can use the steps above to create a Linux Docker machine. You also cannot use Windows containers directly on Windows 10 machine as Hyper-V does not work in parallel with other hypervisors. In that case you might spin up a Windows Server 2016 VM using my &lt;a href="https://github.com/StefanScherer/windows-docker-machine"&gt;Windows Docker Machine&lt;/a&gt; setup. With that you can easily switch between Linux and Windows containers using the &lt;code&gt;docker-machine env&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. I love to hear about your enterprise setup and how to make Docker work on your developer's machines. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>7 Reasons to attend DockerCon</title><description>&lt;p&gt;I'm more than happy that I can make it to DockerCon in Austin, Texas. It is only a few weeks until the workshops and conference starts April, 17th. If you still need some good reasons why you should attend I can give you some ideas. And you will get 10%&lt;/p&gt;</description><link>https://stefanscherer.github.io/7-reasons-to-attend-dockercon/</link><guid isPermaLink="false">d1a87716-b338-470e-b917-186c47e064a3</guid><category>DockerCon</category><category>Docker</category><category>ARM</category><category>windows-containers</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Wed, 29 Mar 2017 22:43:00 GMT</pubDate><content:encoded>&lt;p&gt;I'm more than happy that I can make it to DockerCon in Austin, Texas. It is only a few weeks until the workshops and conference starts April, 17th. If you still need some good reasons why you should attend I can give you some ideas. And you will get 10% discount with the code &lt;strong&gt;CaptainStefan&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id="workshops"&gt;Workshops&lt;/h2&gt;

&lt;p&gt;On Monday I'll be at the workshop &lt;strong&gt;Modernizing monolithic ASP.NET applications with Docker&lt;/strong&gt; where you can get some hands-on experience with Windows containers. You cannot have a better place if you want to get started with Docker on Windows. Michael Friis and Elton Stoneman from Docker and myself can answer all your questions. &lt;/p&gt;

&lt;h2 id="seesomedockerswarmdemos"&gt;See some Docker Swarm demos&lt;/h2&gt;

&lt;p&gt;Come to the Community Theater on Tuesday, Apr 18th, 1:00 PM to see my live demo &lt;a href="https://dockercon.smarteventscloud.com/connect/sessionDetail.ww?SESSION_ID=109712"&gt;&lt;strong&gt;Swarm 2 Go&lt;/strong&gt;&lt;/a&gt; and how our team at SEAL Systems has built a portable multi-arch data center with Raspberry Pi and UP boards.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/picloud.jpg" alt="picloud"&gt;&lt;/p&gt;

&lt;p&gt;You will have the chance to play the chaos monkey and unplug cables to see Docker swarm mode in action. With the help of LED's we can visualise failures and how Docker swarm gets healthy again. All steps to build such a cluster is available in an &lt;a href="https://github.com/sealsystems/tiny-cloud"&gt;open source repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="learnaboutdockeronwindows"&gt;Learn about Docker on Windows&lt;/h2&gt;

&lt;p&gt;Docker is no longer a thing only on Linux. There are several talks about Docker on the Windows platform that I want to see.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dockercon.smarteventscloud.com/connect/sessionDetail.ww?SESSION_ID=107846"&gt;&lt;strong&gt;Docker for .NET developers&lt;/strong&gt;&lt;/a&gt; with Michele Leroux Bustamante, CIO, Solliance&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dockercon.smarteventscloud.com/connect/sessionDetail.ww?SESSION_ID=107848"&gt;&lt;strong&gt;Escape your VMs with Image2Docker&lt;/strong&gt;&lt;/a&gt; with Elton Stoneman from Docker and Docker Captain Jeff Nickoloff&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dockercon.smarteventscloud.com/connect/sessionDetail.ww?SESSION_ID=109233"&gt;&lt;strong&gt;Beyond \ - the path to Windows and Linux parity in Docker&lt;/strong&gt;&lt;/a&gt; with Taylor Brown, Principal Lead Program Manager, Microsoft&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dockercon.smarteventscloud.com/connect/sessionDetail.ww?SESSION_ID=106041"&gt;&lt;strong&gt;Creating Effective Images&lt;/strong&gt;&lt;/a&gt; with Abby Fuller, Technical Evangelist, AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I also recommend to visit the Microsoft booth to hopefully see some Docker swarm mode on Windows Servers. I really look forward to see the latest news and talking with some of the Microsoft Container and Networking team.&lt;/p&gt;

&lt;h2 id="multipleplatforms"&gt;Multiple platforms&lt;/h2&gt;

&lt;p&gt;If you think Docker is only Linux on Intel machines, then comparing it to an instrument it may look like this.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/keyboard-535254_1920.jpg" alt="keyboard"&gt;&lt;/p&gt;

&lt;p&gt;But as you can see the talks above, Docker is available on multiple platforms: Linux, Windows, from small ARM devices like the Raspberry Pi to big IBM machines.&lt;/p&gt;

&lt;p&gt;So the whole spectrum of Docker more looks like this, and once you learned the Docker commands you are able to play this:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/pipe-organ-669589_1920.jpg" alt="organ"&gt;&lt;/p&gt;

&lt;p&gt;So it is time to learn how easy it is to deploy your applications for more than one platform.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dockercon.smarteventscloud.com/connect/sessionDetail.ww?SESSION_ID=106642"&gt;&lt;strong&gt;From Arm to Z: Building, Shipping, and Running a Multi-platform Docker Swarm&lt;/strong&gt;&lt;/a&gt; with Christopher Jones and Christy Perez from IBM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See you at DockerCon! Ping me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt; or with the DockerCon app to get in touch with me during that conference week.&lt;/p&gt;</content:encoded></item><item><title>How to run encrypted Windows websites with Docker and Træfɪk</title><description>&lt;p&gt;Nowadays we read it all the time that every website should be encrytped. Adding TLS certificates to your web server sounds like a hard task to do. You have to update your certificates before they get invalid. I don't run public websites on a regular basis, so I - like&lt;/p&gt;</description><link>https://stefanscherer.github.io/how-to-run-encrypted-windows-websites-with-docker-and-traefik/</link><guid isPermaLink="false">ce3e2341-fc8d-4bca-9d3d-c9873d3c6ace</guid><category>Docker</category><category>Windows</category><category>Azure</category><category>Traefik</category><category>Portainer</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Fri, 10 Mar 2017 22:21:00 GMT</pubDate><content:encoded>&lt;p&gt;Nowadays we read it all the time that every website should be encrytped. Adding TLS certificates to your web server sounds like a hard task to do. You have to update your certificates before they get invalid. I don't run public websites on a regular basis, so I - like many others I guess - have heard of Let's Encrypt, but never really tried it.&lt;/p&gt;

&lt;p&gt;But let's learn new things and try it out. I also have promised in the &lt;a href="https://blog.docker.com/2017/02/dockercast-interview-docker-captain-stefan-scherer-microsoft-docker/"&gt;interview in John Willis' Dockercast&lt;/a&gt; that I will write a blog post about it. With some modern tools you will see, it's not very complicated to run your Windows website with TLS certificates.&lt;/p&gt;

&lt;p&gt;In this blog post I will show you how to run your website in Windows containers with Docker. You can develop your website locally in a container and push it to your server. And another Windows container runs the Træfɪk proxy, that helps us with the TLS certificate as well as with its dynamic configuration to add more than just one website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://traefik.io"&gt;Træfɪk&lt;/a&gt; is a modern HTTP reverse proxy and load balancer made to deploy microservices with ease. It supports several backends like Docker to register and update its configuration for each new started container.&lt;/p&gt;

&lt;p&gt;This picture gives you an overview of the architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/architecture.png" alt="Traefik architecture"&gt;&lt;/p&gt;

&lt;p&gt;Normally Træfɪk is running inside a container and it is well known in the Linux Docker community. A few weeks ago I have seen that there also are Windows binaries available. Let's see if we can use Træfɪk in a Windows container to provide us encrypted HTTPS traffic to other Windows containers running our IIS website, or other web service.&lt;/p&gt;

&lt;h2 id="step1createawindowsdockerhostinazure"&gt;Step 1: Create a Windows Docker host in Azure&lt;/h2&gt;

&lt;p&gt;First of all we need a Windows Server 2016 machine with Docker in the cloud. I will use Azure as Microsoft provides a VM template for that. This server will be our webserver later on with an own DNS name and TLS certs running our website.&lt;/p&gt;

&lt;p&gt;Go to the &lt;a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/quick-start-windows-server"&gt;Windows Containers quick start guide&lt;/a&gt; at docs.microsoft.com and press the "Deploy to Azure" button.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/01-deploy-to-azure-1.png" alt="Deploy to Azure"&gt;&lt;/p&gt;

&lt;p&gt;This will bring you to the Azure portal where you can customize the virtual machine. Create a new resource group, choose the location where the server should be running a and public DNS name, as well as the size of the VM.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/02-customize.png" alt="Customize machine"&gt;&lt;/p&gt;

&lt;p&gt;After you click on "Purchase" the deployment starts which should take only a few minutes.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/03-deployment-started.png" alt="Azure starts deployment"&gt;&lt;/p&gt;

&lt;p&gt;In the meantime click on the cube symbol on the left. That will show you all resource groups you have.&lt;/p&gt;

&lt;p&gt;This Windows + Docker template already creates inbound security rules for HTTPS port 443 as well as the Docker TLS port 2376. So for our purposes we don't need to add more inbound rules.&lt;/p&gt;

&lt;h2 id="step2buyadomainandupdatednsrecords"&gt;Step 2: Buy a domain and update DNS records&lt;/h2&gt;

&lt;p&gt;For Let's Encrypt you need an own domain name to get TLS certificates. For my tests I ordered a domain name at GoDaddy. But after I walked through the steps I realised that Træfɪk also can automatically update your DNS records when you use DNSimple, CloudFlare etc.&lt;/p&gt;

&lt;p&gt;But for first time domain name users like me I show you the manual steps. In my case I went to my domain provider and configured the DNS records.&lt;/p&gt;

&lt;h4 id="getthepublicipaddress"&gt;Get the public IP address&lt;/h4&gt;

&lt;p&gt;Before we can update the DNS record we need the public IP address of the VM. This IP address is also used for the Docker TLS certificates we will create later on.&lt;/p&gt;

&lt;p&gt;In the Azure Portal, open the resource group and click on the public IP address.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/04-resource-group-1.png" alt="Resource group"&gt;&lt;/p&gt;

&lt;p&gt;Write down or copy the IP address shown here.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/08-pubip-1.png" alt="Public IP address"&gt;&lt;/p&gt;

&lt;p&gt;Go back to your domain provider and enter the public IP address in the A record. If you want to run multiple websites within Docker containers, add a CNAME resource record for each sub domain you need. For this tutorial I have added &lt;code&gt;portainer&lt;/code&gt; and &lt;code&gt;whoami&lt;/code&gt; as additional sub domains.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/09-dns-a-record-cname-1.png" alt="Update DNS records"&gt;&lt;/p&gt;

&lt;p&gt;After some minutes all the DNS servers should know your domain name with the new IP address of your Windows Server 2016.&lt;/p&gt;

&lt;h2 id="step3securedockerwithtls"&gt;Step 3: Secure Docker with TLS&lt;/h2&gt;

&lt;p&gt;We now log into the Docker host with RDP. You can use the DNS name provided by Azure or use your domain name. But before you connect with RDP, add a shared folder to your RDP session so you can also copy back the Docker TLS client certificates to your local machine. With this you will also be able to control your Windows Docker engine directly from your local computer.&lt;/p&gt;

&lt;p&gt;In this example I shared my desktop folder with the Windows VM.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/10-rdp-client-add-folder.png" alt="Add folder in RDP client"&gt;&lt;/p&gt;

&lt;p&gt;Now login with the username and password entered at creation time.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/11-rdp-login.png" alt="Login with RDP"&gt;&lt;/p&gt;

&lt;h4 id="createdockertlscerts"&gt;Create Docker TLS certs&lt;/h4&gt;

&lt;p&gt;To use Docker remotely it is recommended to use client certificates, so nobody without that certs can talk to your Docker engine. The same applies if a Windows container wants to communicate with the Docker engine. Using just the unprotected port 2375 would give every container the possibility to gain access to your Docker host.&lt;/p&gt;

&lt;p&gt;Open a PowerShell terminal as an administrator to run a Windows container that can be used to create TLS certificates for your Docker engine. I already have blogged about &lt;a href="https://stefanscherer.github.io/protecting-a-windows-2016-docker-engine-with-tls/"&gt;DockerTLS in more detail&lt;/a&gt; so we just use it here as a tool.&lt;/p&gt;

&lt;p&gt;Retrieve all local IP addresses to allow the TLS certificate also from the host itself, but as well for other Windows containers to talk to your Docker engine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ips = ((Get-NetIPAddress -AddressFamily IPv4).IPAddress) -Join ','
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also create a local folder for the client certificates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ~\.docker  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the DockerTLS tool with &lt;code&gt;docker run&lt;/code&gt;, just append the public IP address from above to the list of &lt;code&gt;IP_ADDRESSES&lt;/code&gt;. Also adjust the &lt;code&gt;SERVER_NAME&lt;/code&gt; variable to your domain name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm `  
  -e SERVER_NAME=schererstefan.xyz `
  -e IP_ADDRESSES=$ips,52.XXXXXXX.198 `
  -v "C:\ProgramData\docker:C:\ProgramData\docker" `
  -v "$env:USERPROFILE\.docker:C:\Users\ContainerAdministrator\.docker" `
  stefanscherer/dockertls-windows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/12-mkdir-and-run-dockertls.png-shadow.png" alt="Run dockertls"&gt;&lt;/p&gt;

&lt;p&gt;Docker will pull the Windows image from Docker Hub and create the TLS certificates in the correct folders for your Docker engine.&lt;/p&gt;

&lt;p&gt;Afterwards you have to restart the Docker engine to use the TLS certificates. The Docker engine now additionally listen on TCP port 2376.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;restart-service docker  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/13-restart-docker.png-shadow.png" alt="Restart docker"&gt;&lt;/p&gt;

&lt;h4 id="addfirewallexceptionfordocker"&gt;Add firewall exception for Docker&lt;/h4&gt;

&lt;p&gt;This step is needed to make other Windows container talk to the Docker engine at port 2376. But it also has another benefit. With these certs you can use the Docker client on your local machine to communicate with the Windows Docker engine in Azure. But I will start Træfɪk later on from the Docker host itself as we need some volume mount points.&lt;/p&gt;

&lt;p&gt;The Windows Server's firewall is active, so we now have to add an exception to allow inbound traffic on port 2376. The network security group for the public IP address already has an inbound rule to the VM. This firewall exception now allows the connection to the Docker engine.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/14-inbound-rule-2376-in-vm.png-shadow.png" alt="Add firewall exception"&gt;&lt;/p&gt;

&lt;p&gt;From now on you can connect to the Docker engine listing on port 2376 from the internet.&lt;/p&gt;

&lt;h4 id="copydockerclientcertstoyourlocalmachine"&gt;Copy Docker client certs to your local machine&lt;/h4&gt;

&lt;p&gt;To setup a working communication from your local machine, copy the Docker client certificates from the virtual machine through the RDP session back to your local machine.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/17-copy-docker-certs.png-shadow.png" alt="Copy Docker TLS certs to client"&gt;&lt;/p&gt;

&lt;p&gt;On your local machine try to connect with the remote Windows Docker engine with TLS encryption and the client certs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ DOCKER_CERT_PATH=~/Desktop/.docker DOCKER_TLS_VERIFY=1 docker -H tcp://schererstefan.xyz:2376 version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/18-mac-client.png" alt="Docker client from Mac"&gt;&lt;/p&gt;

&lt;p&gt;Now you are able to start and stop containers as you like.&lt;/p&gt;

&lt;h2 id="step4runtrfkandotherservices"&gt;Step 4: Run Træfɪk and other services&lt;/h2&gt;

&lt;p&gt;Now comes the fun part. We use Docker and Docker Compose to describe which containers we want to run.&lt;/p&gt;

&lt;h4 id="installdockercompose"&gt;Install Docker Compose&lt;/h4&gt;

&lt;p&gt;To spin up all our containers I use Docker Compose and a &lt;code&gt;docker-compose.yml&lt;/code&gt; file that describes all services.&lt;/p&gt;

&lt;p&gt;The Windows VM does not come with Docker Compose. So we have to install Docker Compose first. If you are working remotely you can use your local installation of Compose and skip this step.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Invoke-WebRequest "https://github.com/docker/compose/releases/download/1.11.2/docker-compose-Windows-x86_64.exe" `  
  -UseBasicParsing -OutFile $Env:ProgramFiles\docker\docker-compose.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you prefer Chocolatey, use &lt;code&gt;choco install docker-compose&lt;/code&gt; instead.&lt;/p&gt;

&lt;h4 id="createdatafoldersondockerhost"&gt;Create data folders on Docker host&lt;/h4&gt;

&lt;p&gt;You need to persist some data outside of the Docker containers, so we create some data folders. Træfɪk retrieves the TLS certs and these should be persisted outside of the container. Otherwise you run into the Let's Encrypt rate limit of 20 requests per week to obtain new certificates. This happened to me trying different things with Træfɪk and starting and killing the container lots of times.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS C:\Users\demo&amp;gt; mkdir sample  
PS C:\Users\demo&amp;gt; cd sample  
PS C:\Users\demo\sample&amp;gt; mkdir traefikdata  
PS C:\Users\demo\sample&amp;gt; mkdir portainerdata  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="dockercomposeyml"&gt;docker-compose.yml&lt;/h4&gt;

&lt;p&gt;For a first test we define two services, the traefik service and a example web server called whoami. This tutorial should give you just an idea and you can extend the YAML file to your needs. Run an IIS website? Put it into a container image. And another IIS website? Just run a separate container with that other website in it. You see you don't have to mix multiple sites, just leave them alone in single microservice images.&lt;/p&gt;

&lt;p&gt;Open up an editor and create the YAML file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS C:\Users\demo\sample&amp;gt; notepad docker-compose.yml  
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-yaml"&gt;version: '2.1'  
services:  
  traefik:
    image: stefanscherer/traefik-windows
    ports:
      - "8080:8080"
      - "443:443"
    volumes:
      - ./traefikdata:C:/etc/traefik
      - ${USERPROFILE}/.docker:C:/etc/ssl:ro

  whoami:
    image: stefanscherer/whoami-windows
    depends_on:
      - traefik
    labels:
      - "traefik.backend=whoami"
      - "traefik.frontend.entryPoints=https"
      - "traefik.frontend.rule=Host:whoami.schererstefan.xyz"

networks:  
  default:
    external:
      name: nat
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I already have built a Træfɪk Windows Docker image that you can use. There might be an official image in the future. If you don't want to use my image, just use this &lt;code&gt;Dockerfile&lt;/code&gt; and replace the &lt;code&gt;image: stefanscherer/traefik-windows&lt;/code&gt; with &lt;code&gt;build: .&lt;/code&gt;, so Docker Compose will build the Træfɪk image for you.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; looks very simple as we directly add the Go binary to the Nanoserver Docker image and define some volumes and labels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM microsoft/nanoserver

ADD https://github.com/containous/traefik/releases/download/v1.2.0-rc2/traefik_windows-amd64 /traefik.exe

VOLUME C:/etc/traefik  
VOLUME C:/etc/ssl

EXPOSE 80  
ENTRYPOINT ["/traefik", "--configfile=C:/etc/traefik/traefik.toml"]

# Metadata
LABEL org.label-schema.vendor="Containous" \  
      org.label-schema.url="https://traefik.io" \
      org.label-schema.name="Traefik" \
      org.label-schema.description="A modern reverse-proxy" \
      org.label-schema.version="v1.2.0-rc2" \
      org.label-schema.docker.schema-version="1.0"
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="traefiktoml"&gt;traefik.toml&lt;/h4&gt;

&lt;p&gt;Træfɪk needs a configuration file where you specify your email address for the Let's Encrypt certificate requests. You will also need the IP address of the container network so that Træfɪk can contact your Docker engine.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ip=(Get-NetIPAddress -AddressFamily IPv4 `
   | Where-Object -FilterScript { $_.InterfaceAlias -Eq "vEthernet (HNS Internal NIC)" } `
   ).IPAddress
Write-Host $ip  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open an editor to create the &lt;code&gt;traefik.toml&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS C:\Users\demo\sample&amp;gt; notepad traefikdata\traefik.toml  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enter that IP address at the &lt;code&gt;endpoint&lt;/code&gt; of the &lt;code&gt;[docker]&lt;/code&gt; section. Also adjust the domain names&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-toml"&gt;[web]
address = ":8080"

[docker]
domain = "schererstefan.xyz"  
endpoint = "tcp://172.24.128.1:2376"  
watch = true

[docker.tls]
ca = "C:/etc/ssl/ca.pem"  
cert = "C:/etc/ssl/cert.pem"  
key = "C:/etc/ssl/key.pem"

# Sample entrypoint configuration when using ACME
[entryPoints]
  [entryPoints.https]
  address = ":443"
    [entryPoints.https.tls]

[acme]

# Email address used for registration
#
# Required
#
email = "you@yourmailprovider.com"

storage = "c:/etc/traefik/acme.json"  
entryPoint = "https"

[[acme.domains]]
   main = "schererstefan.xyz"
   sans = ["whoami.schererstefan.xyz", "portainer.schererstefan.xyz", "www.schererstefan.xyz"]
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="openfirewallforallcontainerportsused"&gt;Open firewall for all container ports used&lt;/h4&gt;

&lt;p&gt;Please notice that the Windows firewall is also active for the container network. The &lt;code&gt;whoami&lt;/code&gt; service listens on port 8000 in each container. To make Træfɪk connect to the &lt;code&gt;whoami&lt;/code&gt; containers you have to add a firewall exception for port 8000.&lt;/p&gt;

&lt;p&gt;Docker automatically adds a firewall exception for all ports mapped to the host with &lt;code&gt;ports:&lt;/code&gt; in the &lt;code&gt;docker-compose.yml&lt;/code&gt;. But for the exposed ports this does not happen automatically.&lt;/p&gt;

&lt;h4 id="spinuptrfkandwhoami"&gt;Spin up Træfɪk and whoami&lt;/h4&gt;

&lt;p&gt;Now it's time to spin up the two containers. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the output of each container and stop them by pressing &lt;code&gt;CTRL+C&lt;/code&gt;. If you want to run them detached in the background, use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So see the output of the services you can use &lt;code&gt;docker-compose logs traefik&lt;/code&gt; or &lt;code&gt;docker-compose logs whoami&lt;/code&gt; at any time.&lt;/p&gt;

&lt;p&gt;Træfɪk now fetches TLS certificates for your domain with the given sub domains. Træfɪk listens for starting and stopping containers.&lt;/p&gt;

&lt;h2 id="testwithabrowser"&gt;Test with a browser&lt;/h2&gt;

&lt;p&gt;Now open a browser on your local machine and try your TLS encrypted website with the subdomain &lt;code&gt;whoami&lt;/code&gt;. You should see a text like &lt;code&gt;I'm 3e1f17ecbba3&lt;/code&gt; which is the hostname of the container.&lt;/p&gt;

&lt;p&gt;Now let's try Træfɪk load balancing feature by scaling up the &lt;code&gt;whoami&lt;/code&gt; service.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose scale whoami=3  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now there are three &lt;code&gt;whoami&lt;/code&gt; containers running and Træfɪk knows all three of them. Each request to the subdomain will be load balanced to one of these containers. You can &lt;code&gt;SHIFT&lt;/code&gt;-reload your page in the browser and see that each request returns another hostname.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/15-browser.png" alt="Test whoami service with browser"&gt;&lt;/p&gt;

&lt;p&gt;So we have a secured HTTPS connection to our Windows containers.&lt;/p&gt;

&lt;h2 id="iis"&gt;IIS&lt;/h2&gt;

&lt;p&gt;The power of Docker is that you can run multiple services on one machine if you have resources left. So let's add another web server, let's choose an IIS server.&lt;/p&gt;

&lt;p&gt;Add these lines to the &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  www:
    image: microsoft/iis
    expose:
      - 80
    depends_on:
      - traefik
    labels:
      - "traefik.backend=www"
      - "traefik.frontend.entryPoints=https"
      - "traefik.frontend.rule=Host:www.schererstefan.xyz"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember to add a firewall exception for port 80 manually. After that spin up the IIS container with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d www  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And check the new sub domain. You will see the welcome page of IIS.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/iis-welcom.png" alt="IIS welcome page"&gt;&lt;/p&gt;

&lt;h2 id="portainer"&gt;Portainer&lt;/h2&gt;

&lt;p&gt;Let's add another useful service to monitor your Docker engine. Portainer is a very good UI for that task and it is also available as a Windows Docker image.&lt;/p&gt;

&lt;p&gt;Add another few lines to our &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  portainer:
    image: portainer/portainer
    command: -H tcp://172.24.128.1:2376 --tlsverify
    volumes:
      - ./portainerdata:C:/data
      - ${USERPROFILE}/.docker:C:/certs
    depends_on:
      - traefik
    labels:
      - "traefik.backend=portainer"
      - "traefik.frontend.entryPoints=https"
      - "traefik.frontend.rule=Host:portainer.schererstefan.xyz"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Portainer also needs the client certs to communicate with the Docker engine. Another volume mount point is used to persist data like your admin login outside the container.&lt;/p&gt;

&lt;p&gt;Now run Portainer with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d portainer  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then open your browser on your local machine with the subdomain. When you open it the first time Portainer will ask you for an admin password. Enter a password you want to use and then login with it.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/19-portainer-login.png" alt="Portainer login"&gt;&lt;/p&gt;

&lt;p&gt;Now you have an UI to see all containers running, all Docker images downloaded etc.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/20-portainer-dashboard.png" alt="Portainer dashboard"&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/03/21-portainer-containers.png" alt="Portainer containers"&gt;&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;What we have learned is that Træfɪk works pretty good on Windows. It helps us securing our websites with TLS certificates. In combination with Docker Compose you can add or remove new websites on the fly or even scale some services with the built-in load balancer of Træfɪk.&lt;/p&gt;

&lt;p&gt;Read more details in the &lt;a href="https://docs.traefik.io"&gt;Træfɪk documentation&lt;/a&gt; as I can give you only a short intro of its capabilities.&lt;/p&gt;

&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Setup a Windows Docker CI with AppVeyor</title><description>&lt;p&gt;I love GitHub and all the services around it. It enables you to work from anywhere or &lt;a href="https://stefanscherer.github.io/content/images/2016/02/boot2docker-ipad.jpg"&gt;any device&lt;/a&gt; and still have your complete CI pipeline in your pocket. Every thing is done with a &lt;code&gt;git push&lt;/code&gt;. You can add services like &lt;a href="https://codeship.com"&gt;Codeship&lt;/a&gt;, &lt;a href="https://travis-ci.org"&gt;Travis&lt;/a&gt;, &lt;a href="https://circleci.com"&gt;Circle&lt;/a&gt; and lots of others to&lt;/p&gt;</description><link>https://stefanscherer.github.io/setup-windows-docker-ci-appveyor/</link><guid isPermaLink="false">f979baa4-3b39-4cf6-9d84-a74d2453e9cb</guid><category>Docker</category><category>Windows</category><category>GitHub</category><category>AppVeyor</category><category>CI</category><category>Docker-Compose</category><category>Docker-Swarm</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Fri, 10 Mar 2017 05:54:00 GMT</pubDate><content:encoded>&lt;p&gt;I love GitHub and all the services around it. It enables you to work from anywhere or &lt;a href="https://stefanscherer.github.io/content/images/2016/02/boot2docker-ipad.jpg"&gt;any device&lt;/a&gt; and still have your complete CI pipeline in your pocket. Every thing is done with a &lt;code&gt;git push&lt;/code&gt;. You can add services like &lt;a href="https://codeship.com"&gt;Codeship&lt;/a&gt;, &lt;a href="https://travis-ci.org"&gt;Travis&lt;/a&gt;, &lt;a href="https://circleci.com"&gt;Circle&lt;/a&gt; and lots of others to build and test your code and even the pull requests you get from others.&lt;/p&gt;

&lt;h2 id="butimonwindows"&gt;But I'm on Windows&lt;/h2&gt;

&lt;p&gt;To build applications for Windows there is a similar cloud based CI service, called &lt;a href="https://www.appveyor.com"&gt;AppVeyor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And it works pretty similar to the other well known services for Linux: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Put a YAML file into your repo with the build, test and deploy steps  &lt;/li&gt;
&lt;li&gt;Connect your repo to the cloud CI service  &lt;/li&gt;
&lt;li&gt;From now on a &lt;code&gt;git push&lt;/code&gt; will do a lot for you.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your CI pipeline is set up in a few clicks.&lt;/p&gt;

&lt;h2 id="appveyoryml"&gt;appveyor.yml&lt;/h2&gt;

&lt;p&gt;Here is an example how such a YAML file looks like for AppVeyor. This is from a &lt;a href="https://github.com/StefanScherer/win-getaddrinfo"&gt;small C/C++ project&lt;/a&gt; I made long time ago during holiday without Visual Studio at hand. I just created that GitHub repo, added the &lt;code&gt;appveyor.yml&lt;/code&gt; and voila - I got a compiled and statically linked &lt;a href="https://github.com/StefanScherer/win-getaddrinfo/releases"&gt;Windows binary at GitHub releases&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-yaml"&gt;version: 1.0.{build}  
configuration: Release  
platform: x64  
build:  
  project: myfavoriteproject.sln
  verbosity: minimal
test: off  
artifacts:  
- path: x64/Release/myfavoriteproject.exe
  name: Release
deploy:  
- provider: GitHub
  auth_token:
    secure: xxxxx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The build worker in AppVeyor is fully armed with &lt;a href="https://www.appveyor.com/docs/installed-software/"&gt;lots of development tools&lt;/a&gt;, so you can build projects for serveral languages like Node.js, .NET, Ruby, Python, Java ...&lt;/p&gt;

&lt;h2 id="dockerbuild"&gt;Docker build&lt;/h2&gt;

&lt;p&gt;AppVeyor now has released a new build worker with Windows Server 2016 and &lt;strong&gt;Docker Enterprise Edition&lt;/strong&gt; 17.03.0-ee-1 pre-installed. That instantly enables you to build, test and publish Windows Docker images in the same lightweight way.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/02/github_appveyor_docker.png" alt="Docker build with AppVeyor"&gt;&lt;/p&gt;

&lt;p&gt;All you have to do is to select the new build worker by adding &lt;code&gt;image: Visual Studio 2017&lt;/code&gt; to your &lt;code&gt;appveyor.yml&lt;/code&gt;. No more work to do to get a fully Windows Docker engine for your build.&lt;/p&gt;

&lt;p&gt;The following &lt;code&gt;appveyor.yml&lt;/code&gt; gives you an idea how easy an automated Docker build for Windows can be:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-yaml"&gt;version: 1.0.{build}  
image: Visual Studio 2017

environment:  
  DOCKER_USER:
    secure: xxxxxxx
  DOCKER_PASS:
    secure: yyyyyyy
install:  
  - docker version

build_script:  
  - docker build -t me/myfavoriteapp .

test_script:  
  - docker run me/myfavoriteapp

deploy_script:  
  - docker login -u="$env:DOCKER_USER" -p="$env:DOCKER_PASS"
  - docker push me/myfavoriteapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very simple example. For the tests you can think of some more sophisticated tests like using Pester, Serverspec or Cucumber. For the deploy steps you can decide when to run these, eg. only for a tagged build to push a new release.&lt;/p&gt;

&lt;h2 id="dockercompose"&gt;Docker Compose&lt;/h2&gt;

&lt;p&gt;You are not limited to build a single Docker image and run one container. Your build agent is a full Windows Docker host, so you also can install Docker Compose and spin up a multi-container application. The nice thing about AppVeyor is that the builders also have &lt;a href="https://chocolatey.org"&gt;Chocolatey&lt;/a&gt; preinstalled. So you only have to add a short single command to your &lt;code&gt;appveyor.yml&lt;/code&gt; to download and install Docker Compose.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-powershell"&gt;choco install docker-compose  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="dockerswarm"&gt;Docker Swarm&lt;/h2&gt;

&lt;p&gt;You also might turn the Docker engine into a single node Docker swarm manager to work with the new commands &lt;code&gt;docker stack deploy&lt;/code&gt;. You can create a Docker Swarm with this command&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-powershell"&gt;docker swarm init  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="addprojecttobuild"&gt;Add project to build&lt;/h2&gt;

&lt;p&gt;Adding AppVeyor to one of your GitHub repos is very simple. Sign in to AppVeyor with your GitHub account and select your project to add.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/02/appveyor-add-project.png" alt="AppVeyor add project"&gt;&lt;/p&gt;

&lt;p&gt;Now you can also check the pull requests you or others create on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/02/github-pr-green.png" alt="GitHub pull request checks green"&gt;&lt;/p&gt;

&lt;p&gt;You can click on the green checkmark to view the console output of the build.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/02/appveyor-build-green.png" alt="AppVeyor pull request build green"&gt;&lt;/p&gt;

&lt;h2 id="tellmeasecret"&gt;Tell me a secret&lt;/h2&gt;

&lt;p&gt;To push to the Docker Hub we need to configure some secrets in AppVeyor. After you are logged in to AppVeyor you can select the "Encrypt data" menu item from the drop down menu or use the link &lt;a href="https://ci.appveyor.com/tools/encrypt"&gt;https://ci.appveyor.com/tools/encrypt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There you can enter your cleartext secret and it creates the encrypted configuration data you can use in your &lt;code&gt;appveyor.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/02/appveyor-encrypt-data.png" alt="Appveyor encrypt configuration data"&gt;&lt;/p&gt;

&lt;p&gt;These secret variables don't get injected in pull request builds, so nobody can fork your repo and send you an &lt;code&gt;ls env:&lt;/code&gt; pull request to expose that variables in the output.&lt;/p&gt;

&lt;h2 id="immutablebuilds"&gt;Immutable builds&lt;/h2&gt;

&lt;p&gt;One of the biggest advantages over self-hosting a CI pipeline is that you get immutable builds. You just do not have to care about the dirt and dust your build left on the build worker. AppVeyor - like all other cloud based CI systems - just throws away the build worker and you get another empty one for the next build.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/02/appveyor-docker-build.png" alt="AppVeyor immutable build"&gt;&lt;/p&gt;

&lt;p&gt;Even if you build Windows Docker images you don't have to cleanup your Docker host. You can concentrate on your code, the build and your tests, and forget about maintain your CI workers.&lt;/p&gt;

&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;

&lt;p&gt;I have some GitHub repos that already use AppVeyor to build Windows Docker images, so you can have a look how my setup works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/StefanScherer/dockerfiles-windows"&gt;github.com/StefanScherer/dockerfiles-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/StefanScherer/winspector"&gt;github.com/StefanScherer/winspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;AppVeyor is my #1 when it comes to automated Windows builds. With the Docker support built-in it becomes even more interesting.&lt;/p&gt;

&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Is there a Windows Docker image for ...?</title><description>&lt;p&gt;Do you want to try out Windows containers, but don't want to start too low level? If you are using one of the following programming languages you can benefit of already available official Docker images for Windows.&lt;/p&gt;

&lt;p&gt;These Docker images are well maintained and you can just start and put&lt;/p&gt;</description><link>https://stefanscherer.github.io/is-there-a-windows-docker-image-for/</link><guid isPermaLink="false">4b399853-01af-4bf3-a6d6-0c70c21ce821</guid><category>Docker</category><category>Windows</category><category>Golang</category><category>Python</category><category>Node.js</category><category>Java</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Tue, 21 Feb 2017 23:56:58 GMT</pubDate><content:encoded>&lt;p&gt;Do you want to try out Windows containers, but don't want to start too low level? If you are using one of the following programming languages you can benefit of already available official Docker images for Windows.&lt;/p&gt;

&lt;p&gt;These Docker images are well maintained and you can just start and put your application code inside and run your application easily in a Windows container.&lt;/p&gt;

&lt;p&gt;Someone else did the hard work how to install the runtime or compiler for language XYZ into Windows Server Core container or even a Nanoserver container.&lt;/p&gt;

&lt;h2 id="prefernanoserver"&gt;Prefer NanoServer&lt;/h2&gt;

&lt;p&gt;So starting to work with NanoServer is really easy with Docker as you only choose the right image for the &lt;code&gt;FROM&lt;/code&gt; instruction in your &lt;code&gt;Dockerfile&lt;/code&gt;. You can start with windowsservercore images, but I encourage you to test with nanoserver as well. For these languages it is easy to switch and the final Docker images are much smaller.&lt;/p&gt;

&lt;p&gt;So let's have a look which languages are already available. The corresponding Docker Hub page normally has a short intro how to use these Docker images.&lt;/p&gt;

&lt;h2 id="go"&gt;Go&lt;/h2&gt;

&lt;p&gt;The Go programming language is available on the Docker Hub as image &lt;a href="https://hub.docker.com/_/golang/"&gt;&lt;code&gt;golang&lt;/code&gt;&lt;/a&gt;. To get the latest Go 1.8 for either Windows Server Core or NanoServer you choose one of these.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM golang:windowsservercore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FROM golang:nanoserver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a look at the &lt;a href="https://hub.docker.com/_/golang/"&gt;tags page&lt;/a&gt; if you want another version or if you want to pin a specific version of Golang.&lt;/p&gt;

&lt;h2 id="java"&gt;Java&lt;/h2&gt;

&lt;p&gt;When you hear Java you might immediately think of Oracle Java. But searching for alternatives I found three OpenJDK distros for Windows. One of them recently made it into the official &lt;a href="https://hub.docker.com/_/openjdk/"&gt;&lt;code&gt;openjdk&lt;/code&gt;&lt;/a&gt; Docker images. Both Windows Server Core and NanoServer are supported.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM openjdk:windowsservercore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FROM openjdk:nanoserver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you prefer Oracle Java for private installations, you can build a Docker image with the Dockerfiles provided in the &lt;a href="https://github.com/oracle/docker-images/tree/master/OracleJava/windows-java-8"&gt;oracle/docker-images&lt;/a&gt; repository.&lt;/p&gt;

&lt;h2 id="nodejs"&gt;Node.JS&lt;/h2&gt;

&lt;p&gt;For Node.js there are pull requests awaiting a CI build agent for Windows to make it into the official &lt;a href="https://hub.docker.com/_/node/"&gt;&lt;code&gt;node&lt;/code&gt;&lt;/a&gt; images.&lt;/p&gt;

&lt;p&gt;In the meantime you can use one of my maintained images, for example the latest Node LTS version for both Windows Server Core and NanoServer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM stefanscherer/node-windows:6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FROM stefanscherer/node-windows:6-nano&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You also can find more tags and versions at the &lt;a href="https://hub.docker.com/r/stefanscherer/node-windows/"&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="python"&gt;Python&lt;/h2&gt;

&lt;p&gt;The script language Python is available as Windows Server Core Docker image at the official &lt;a href="https://hub.docker.com/_/python/"&gt;&lt;code&gt;python&lt;/code&gt;&lt;/a&gt; images. Both major versions of Python are available.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM python:3-windowsservercore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FROM python:2-windowsservercore&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also have a Python Docker image &lt;a href="https://hub.docker.com/r/stefanscherer/python-windows/"&gt;for NanoServer&lt;/a&gt; with Python 3.6 to create smaller Docker images.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM stefanscherer/python-windows:nano&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="netcore"&gt;.NET Core&lt;/h2&gt;

&lt;p&gt;Microsoft provides Linux and Windows Docker images for .NET Core at &lt;a href="https://hub.docker.com/r/microsoft/dotnet/"&gt;&lt;code&gt;microsoft/dotnet&lt;/code&gt;&lt;/a&gt;. For Windows it is NanoServer only, but this is no disadvantage as you should plan for the smaller NanoServer images.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM microsoft/dotnet:nanoserver&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="aspnet"&gt;ASP.NET&lt;/h2&gt;

&lt;p&gt;For ASP.NET there are Windows Server Core Docker images for the major versions 3 and 4 with IIS installed at &lt;a href="https://hub.docker.com/r/microsoft/aspnet/"&gt;&lt;code&gt;microsoft/aspnet&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM microsoft/aspnet:4.6.2-windowsservercore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FROM microsoft/aspnet:3.5-windowsservercore&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The number of programming languages provided in Windows Docker images is growing. This makes it relatively easy to port Linux applications to Windows or use Docker images to distribute apps for both platforms.&lt;/p&gt;

&lt;p&gt;Haven't found an image for your language? Have I missed something? Please let me know, and use the comments below if you have questions how to get started. Thanks for your interest. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Getting started with Docker Swarm-mode on Windows 10</title><description>&lt;p&gt;Last Friday I noticed a blog post that &lt;a href="https://blogs.technet.microsoft.com/virtualization/2017/02/09/overlay-network-driver-with-support-for-docker-swarm-mode-now-available-to-windows-insiders-on-windows-10/"&gt;Overlay Network Driver with Support for Docker Swarm Mode Now Available to Windows Insiders on Windows 10&lt;/a&gt;. A long awaited feature to use Docker Swarm on Windows, so it's time to test-drive it.&lt;/p&gt;

&lt;p&gt;Well you wonder why this feature is available on&lt;/p&gt;</description><link>https://stefanscherer.github.io/docker-swarm-mode-windows10/</link><guid isPermaLink="false">fcae230c-7580-49dc-a9e0-b57183dc841a</guid><category>Docker</category><category>Swarm</category><category>Windows 10</category><category>Overlay</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Mon, 13 Feb 2017 01:31:00 GMT</pubDate><content:encoded>&lt;p&gt;Last Friday I noticed a blog post that &lt;a href="https://blogs.technet.microsoft.com/virtualization/2017/02/09/overlay-network-driver-with-support-for-docker-swarm-mode-now-available-to-windows-insiders-on-windows-10/"&gt;Overlay Network Driver with Support for Docker Swarm Mode Now Available to Windows Insiders on Windows 10&lt;/a&gt;. A long awaited feature to use Docker Swarm on Windows, so it's time to test-drive it.&lt;/p&gt;

&lt;p&gt;Well you wonder why this feature is available on Windows 10 and not Windows Server 2016. Sure it will make more sense in production running a Docker Swarm on multiple servers. The reason is that the Insider preview is the fastest channel to ship new features. Unfortunately there is no equivalent for Windows Server editions.&lt;/p&gt;

&lt;p&gt;So if you need it for Windows Server you have to wait a little longer. You can indeed test Swarm-Mode on Windows Server 2016 and Docker 1.13, but only without the Overlay network.  To test Swarm-Mode with Overlay network you will need some machines running Windows 10 Insider 15031.&lt;/p&gt;

&lt;h2 id="preparation"&gt;Preparation&lt;/h2&gt;

&lt;p&gt;In my case I use &lt;a href="https://www.vagrantup.com"&gt;Vagrant&lt;/a&gt; to spin up Windows VM's locally on my notebook. The advantage is that you can describe some test scenarios with a &lt;code&gt;Vagrantfile&lt;/code&gt; and share it on GitHub.&lt;/p&gt;

&lt;p&gt;I already have played with Docker Swarm-Mode in December and created a &lt;a href="https://github.com/StefanScherer/docker-windows-box/tree/master/swarm-mode"&gt;Vagrant environment with some Windows Server 2016 VM's&lt;/a&gt;. I'll re-use this scenario and just replace the underlying Vagrant box.&lt;/p&gt;

&lt;p&gt;So the hardest part is to build a Windows 10 Insider 15031 VM. The &lt;a href="https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewadvanced"&gt;latest ISO file&lt;/a&gt; with Windows 10 Insider 15025 is a good starting point. You have to switch to the Fast Ring to fetch the latest updates for Insider 15031.&lt;/p&gt;

&lt;p&gt;Normally I use &lt;a href="https://www.packer.io"&gt;Packer&lt;/a&gt; with my &lt;a href="https://github.com/StefanScherer/packer-windows"&gt;packer-windows&lt;/a&gt; templates available on GitHub to automatically create such Vagrant boxes. In this case I only have a semi-automated template. Download the ISO file, build a VM with the &lt;a href="https://github.com/StefanScherer/packer-windows/blob/my/windows_10_insider.json"&gt;&lt;code&gt;windows_10_insider.json&lt;/code&gt;&lt;/a&gt; template and update it to Insider 15031 manually. With such a VM, build the final Vagrant box with the &lt;a href="https://github.com/StefanScherer/packer-windows/blob/my/windows_10_docker.json"&gt;&lt;code&gt;windows_10_docker.json&lt;/code&gt;&lt;/a&gt; Packer template.&lt;/p&gt;

&lt;p&gt;What we now have is a Windows 10 Insider 15031 VM with the Containers and Hyper-V features activated, Docker 1.13.1 installed and both Microsoft Docker images downloaded. All the time consuming things should be done in a Packer build to make the final &lt;code&gt;vagrant up&lt;/code&gt; a breeze.&lt;/p&gt;

&lt;p&gt;In my case I had to add the Vagrant box with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant box add windows_10_docker ./windows_10_insider_15031_docker_vmware.box  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrant 1.9.1 is able to use linked clones for VMware Fusion, VirtualBox and Hyper-V. So you need this big Vagrant box only once on disk. For the Docker Swarm only a clone will be started for each VM to save time and disk space.&lt;/p&gt;

&lt;h2 id="createtheswarm"&gt;Create the Swarm&lt;/h2&gt;

&lt;p&gt;Now we use the prepared Vagrant environment and adjust it  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/StefanScherer/docker-windows-box  
cd docker-windows-box/swarm-mode  
vi Vagrantfile  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;Vagrantfile&lt;/code&gt; I had to change only the name of the box after &lt;code&gt;config.vm.box&lt;/code&gt; to the newly added Vagrant box. This is like changing the &lt;code&gt;FROM&lt;/code&gt; in a &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/02/git-diff-swarm-mode.png" alt="git diff Vagrantfile"&gt;&lt;/p&gt;

&lt;p&gt;I also adjusted the memory a little bit to spin up more Hyper-V containers.&lt;/p&gt;

&lt;p&gt;But now we are ready to create the Docker Swarm with a simple&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant up  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will spin up three Windows 10 VM's and build the Docker Swarm automatically for you. But using linked clones and the well prepared Vagrant basebox it takes only some minutes to have a complete Docker Swarm up and running.&lt;/p&gt;

&lt;h2 id="dockernodels"&gt;docker node ls&lt;/h2&gt;

&lt;p&gt;After all three VM's are up and running, go into the first VM and open a PowerShell terminal. With&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker node ls  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can check if your Docker Swarm is active.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/02/swarm-mode.png" alt=""&gt;&lt;/p&gt;

&lt;h2 id="createanetwork"&gt;Create a network&lt;/h2&gt;

&lt;p&gt;Now we create a new overlay network with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker network create --driver=overlay sample  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can list all networks with &lt;code&gt;docker network ls&lt;/code&gt; as there are already some others.&lt;/p&gt;

&lt;h2 id="createawhoamiservice"&gt;Create a whoami service&lt;/h2&gt;

&lt;p&gt;With this new overlay network we start a simple service. I've prepared a Windows version of the &lt;code&gt;whoami&lt;/code&gt; service. This is a simple webserver that just responds with its internal container hostname.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker service create --name=whoami --endpoint-mode dnsrr `  
  --network=sample stefanscherer/whoami-windows:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the moment only DNS round robin is implemented as described in the Microsoft blog post. You cannot use to publish ports externally right now. More to come in the near future.&lt;/p&gt;

&lt;h2 id="runvisualizer"&gt;Run visualizer&lt;/h2&gt;

&lt;p&gt;To make it more visible what happens in the next steps I recommend to run the Visualizer. On the first VM you can run the Visualizer with &lt;a href="https://github.com/StefanScherer/docker-windows-box/blob/master/swarm-mode/scripts/run-portainer.ps1"&gt;this script&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-powershell"&gt;C:\vagrant\scripts\run-visualizer.ps1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open a browser with another &lt;a href="https://github.com/StefanScherer/docker-windows-box/blob/master/swarm-mode/scripts/open-visualizer.ps1"&gt;helper script&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-powershell"&gt;C:\vagrant\scripts\open-visualizer.ps1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can scale up the service to spread it over your Docker swarm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker service scale whoami=4  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will bring up the service on all three nodes and one of the nodes is running two instances of the whoami service.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/02/visualizer.png" alt="Visualizer"&gt;&lt;/p&gt;

&lt;p&gt;Just play around scaling the service up and down a little bit.&lt;/p&gt;

&lt;h2 id="buildandcreateanotherservice"&gt;Build and create another service&lt;/h2&gt;

&lt;p&gt;As I've mentioned above you cannot publish ports and there is no routing mesh at the moment. So the next thing is to create another service that will access the &lt;code&gt;whoami&lt;/code&gt; service inside the overlay network. On Linux you probably would use &lt;code&gt;curl&lt;/code&gt; to do that. I tried just a simple PowerShell script to do the same.&lt;/p&gt;

&lt;p&gt;Two small files are needed to create a Docker image. First the simple script &lt;code&gt;askthem.ps1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-powershell"&gt;while ($true) {  
  (Invoke-WebRequest -UseBasicParsing http://whoami:8000).Content
  Start-Sleep 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the PowerShell script will access the webserver with the hostname &lt;code&gt;whoami&lt;/code&gt; on port 8000.&lt;/p&gt;

&lt;p&gt;Now put this Script into a Docker image with this &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM microsoft/nanoserver  
COPY askthem.ps1 askthem.ps1  
CMD ["powershell", "-file", "askthem.ps1"]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now build the Docker image with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t askthem .  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now can start the second service that consumes the whoami service.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker service create --name=askthem --network=sample askthem:latest  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now should see one instance of the newly created &lt;code&gt;askthem&lt;/code&gt; service. Let's have a look at the logs. As this Vagrant environment enables the experimental features of Docker we are able to get the logs with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker service logs askthem  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case I had luck and the &lt;code&gt;askthem&lt;/code&gt; service got a response from one of the &lt;code&gt;whoami&lt;/code&gt; containers that is running on a different Docker node.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/02/windows10-swarm-mode.png" alt="Windows 10 Swarm-Mode"&gt;&lt;/p&gt;

&lt;p&gt;I haven't figured out why all the responses are from the same container. Maybe PowerShell or the &lt;code&gt;askthem&lt;/code&gt; container itself caches the DNS requests. &lt;/p&gt;

&lt;p&gt;But it still proves that overlay networking is working across multiple Windows machines.&lt;/p&gt;

&lt;h2 id="moretoplaywith"&gt;More to play with&lt;/h2&gt;

&lt;p&gt;The Vagrant environment has some more things prepared. You also can spin up &lt;a href="http://portainer.io"&gt;Portainer&lt;/a&gt; that gives you a nice UI to your Docker swarm. You can have a look at your Nodes, the Docker images, the containers and services running and so on.&lt;/p&gt;

&lt;p&gt;I also found out that you can scale services in the Portainer UI by changing the replicas. Running Visualizer and Portainer side-by-side demonstrates that:&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/02/visualizer-portainer.gif" alt="Visualizer and Portainer"&gt;&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I think this setup can help you trying out the new Overlay network in Windows 10 Insider, and hopefully in Windows Server 2016 very soon as well.&lt;/p&gt;

&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Dockerizing Ghost and Buster to run a blog on GitHub pages</title><description>&lt;p&gt;I'm running this blog for nearly three years now. One of my first posts was the description how to &lt;a href="https://stefanscherer.github.io/setup-ghost-for-github-pages/"&gt;setup Ghost for GitHub pages&lt;/a&gt;. In the past I've installed lots of tools on my Mac to run &lt;a href="https://ghost.org"&gt;Ghost&lt;/a&gt; and &lt;a href="https://pypi.python.org/pypi/buster/0.1.3"&gt;Buster&lt;/a&gt; locally.&lt;/p&gt;

&lt;p&gt;I still like this setup hosting only the static&lt;/p&gt;</description><link>https://stefanscherer.github.io/dockerizing-ghost-buster/</link><guid isPermaLink="false">7e4d1fed-d14d-4cad-8f27-c30cc73e00ea</guid><category>Docker</category><category>Ghost</category><category>Buster</category><category>Docker-Compose</category><category>GitHub</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Sat, 11 Feb 2017 18:46:46 GMT</pubDate><content:encoded>&lt;p&gt;I'm running this blog for nearly three years now. One of my first posts was the description how to &lt;a href="https://stefanscherer.github.io/setup-ghost-for-github-pages/"&gt;setup Ghost for GitHub pages&lt;/a&gt;. In the past I've installed lots of tools on my Mac to run &lt;a href="https://ghost.org"&gt;Ghost&lt;/a&gt; and &lt;a href="https://pypi.python.org/pypi/buster/0.1.3"&gt;Buster&lt;/a&gt; locally.&lt;/p&gt;

&lt;p&gt;I still like this setup hosting only the static files at GitHub without maintaining an online server. But over time you also have to update Ghost, the Node version used and so on. That's why I have revisited my setup to make it easier for me to update Ghost by running all tools in Docker containers. &lt;/p&gt;

&lt;h3 id="requirements"&gt;Requirements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Docker for Mac&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt; (is already installed)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose&lt;/code&gt; (already installed with D4M)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find my setup and all files in my GitHub repo &lt;a href="https://github.com/StefanScherer/ghost-buster-docker"&gt;StefanScherer/ghost-buster-docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I'm upgrading from my local Ghost installation to this dockerized version I already have some content, the static files and my GitHub pages repo. Please refer to my old blog post how to create your repo. The following commands should give you an idea how to setup the two folders &lt;code&gt;content&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/YOURNAME/ghost-buster-docker  
cd ghost-buster-docker  
mkdir content  
git clone https://github.com/YOURNAME/YOURNAME.github.io static  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="dockercomposeyml"&gt;docker-compose.yml&lt;/h3&gt;

&lt;p&gt;To simplify running Ghost and Buster I've created a &lt;code&gt;docker-compose.yml&lt;/code&gt; with all the published ports and volume mount points.&lt;/p&gt;

&lt;p&gt;There are three services&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ghost&lt;/li&gt;
&lt;li&gt;buster&lt;/li&gt;
&lt;li&gt;preview&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-yaml"&gt;version: '2.1'

services:  
  ghost:
    image: ghost:0.11.4
    volumes:
      - ./content:/var/lib/ghost
    ports:
      - 2368:2368

  buster:
    image: stefanscherer/buster
    command: /buster.sh
    volumes:
      - ./static:/static
      - ./buster.sh:/buster.sh

  preview:
    image: nginx
    volumes:
      - ./static:/usr/share/nginx/html:ro
    ports:
      - 2369:80
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="editcontentwithghost"&gt;Edit content with Ghost&lt;/h3&gt;

&lt;p&gt;To create new blog post or edit existing posts you spin up the &lt;code&gt;ghost&lt;/code&gt; container with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d ghost  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then open up your browser at &lt;code&gt;https://stefanscherer.github.io/ghost&lt;/code&gt; to login and edit content. As you can see the folder &lt;code&gt;content&lt;/code&gt; is mapped into the &lt;code&gt;ghost&lt;/code&gt; container to persist your Ghost blog data and images on your host machine.&lt;/p&gt;

&lt;h3 id="generatestaticfiles"&gt;Generate static files&lt;/h3&gt;

&lt;p&gt;To generate the static HTML pages we use the second service with Buster installed. This is no real service, so we do not "up" but "run" it with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose run buster  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have updated files in the &lt;code&gt;static&lt;/code&gt; folder. You may edit the local script &lt;code&gt;buster.sh&lt;/code&gt; to fix some links that Buster broke in the past in my pages.&lt;/p&gt;

&lt;h2 id="previewstaticfiles"&gt;Preview static files&lt;/h2&gt;

&lt;p&gt;From time to time it is useful to check the generated static HTML files before pushing them to GitHub pages. The third service is useful to run a webserver with the created static pages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker-compose up -d preview  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Open your browser at &lt;code&gt;http://localhost:2369&lt;/code&gt; and check if everything looks good. In my setup I've added Disqus and first wanted to try out the results of modifying the &lt;code&gt;post.hbs&lt;/code&gt; file of the theme.&lt;/p&gt;

&lt;h3 id="deploystaticfiles"&gt;Deploy static files&lt;/h3&gt;

&lt;p&gt;If you are happy with the new static files it's time to push them. I've added a small script &lt;code&gt;deploy.sh&lt;/code&gt; to do the final steps on the host as only &lt;code&gt;git&lt;/code&gt; is used here. As I'm using GitHub with SSH and a passphrase I don't want to put that into a container. Have a look at the shell script and you will see that it's only a &lt;code&gt;git add &amp;amp;&amp;amp; git commit &amp;amp;&amp;amp; git push&lt;/code&gt; script.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./deploy.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I think this setup will help me in the future to update Ghost more easily. &lt;/p&gt;

&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Winspector - a tool to inspect your and other's Windows images</title><description>&lt;p&gt;In my &lt;a href="https://stefanscherer.github.io/keep-your-windows-containers-up-to-date/"&gt;previous blog post&lt;/a&gt; I showed you how to get Windows Updates into your container images. But how do you know if your underlying Docker image you use in the &lt;code&gt;FROM&lt;/code&gt; line of your &lt;code&gt;Dockerfile&lt;/code&gt; also uses the correct version of the Windows base image?&lt;/p&gt;

&lt;p&gt;Is there a way&lt;/p&gt;</description><link>https://stefanscherer.github.io/winspector/</link><guid isPermaLink="false">5326246a-c5c3-4a6f-b062-d9330e9d651a</guid><category>Docker</category><category>Windows</category><category>Container</category><category>Docker Hub</category><category>Python</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Sun, 08 Jan 2017 14:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In my &lt;a href="https://stefanscherer.github.io/keep-your-windows-containers-up-to-date/"&gt;previous blog post&lt;/a&gt; I showed you how to get Windows Updates into your container images. But how do you know if your underlying Docker image you use in the &lt;code&gt;FROM&lt;/code&gt; line of your &lt;code&gt;Dockerfile&lt;/code&gt; also uses the correct version of the Windows base image?&lt;/p&gt;

&lt;p&gt;Is there a way to look into container images without downloading them?&lt;/p&gt;

&lt;p&gt;There are several services like &lt;a href="https://imagelayers.io"&gt;imagelayers.io&lt;/a&gt;, &lt;a href="https://microbadger.com"&gt;microbadger&lt;/a&gt;, &lt;a href="http://shields.io"&gt;shields.io&lt;/a&gt; and others which provide badges and online views for existing Docker images at Docker Hub. Unfortunately not all support Windows images at the moment.&lt;/p&gt;

&lt;h2 id="enterwinspector"&gt;Enter winspector&lt;/h2&gt;

&lt;p&gt;I found an &lt;a href="https://github.com/giantswarm/inspect-docker-image"&gt;inspector tool&lt;/a&gt; written in Python that might be useful for that task. I've enhanced it and created a tool called winspector which is available as Docker image &lt;a href="https://hub.docker.com/r/stefanscherer/winspector/"&gt;stefanscherer/winspector&lt;/a&gt; for Windows and Linux. With this tool you can inspect any Windows Docker images on the Docker Hub.&lt;/p&gt;

&lt;p&gt;Winspector will show you&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The creation date of the image and the Docker version and Windows version used at build time.&lt;/li&gt;
&lt;li&gt;The number of layers down to the Windows base image&lt;/li&gt;
&lt;li&gt;Which &lt;strong&gt;Windows base image&lt;/strong&gt; the given image depends on. So you know whether a random Windows image uses the up to date Windows base image or not.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;size of each layer&lt;/strong&gt;. This is useful to when you try to optimize your image size.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;"application size" without the Windows base layers&lt;/strong&gt;. So you get an idea how small your Windows application image really is and what other users have to download provided that they already have the base image.&lt;/li&gt;
&lt;li&gt;The history of the image. It tries to &lt;strong&gt;reconstruct the &lt;code&gt;Dockerfile&lt;/code&gt; commands&lt;/strong&gt; that have been used to build the image.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="runitfromwindows"&gt;Run it from Windows&lt;/h3&gt;

&lt;p&gt;If you have Docker running with Windows containers, use this command to run the tool with any given image name and an optional tag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm stefanscherer/winspector microsoft/iis  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/01/winspector-wndows.png" alt="run from windows"&gt;&lt;/p&gt;

&lt;p&gt;At the moment the Docker image depends on the windowsservercore base image. I'll try to move it to nanoserver to reduce download size for Windows 10 users.&lt;/p&gt;

&lt;h3 id="runitfrommaclinux"&gt;Run it from Mac / Linux&lt;/h3&gt;

&lt;p&gt;If you have a Linux Docker engine running, just use the exact same command as on Windows. The Docker image &lt;code&gt;stefanscherer/winspector&lt;/code&gt; is a &lt;strong&gt;multiarch Docker image&lt;/strong&gt; and Docker will pull the correct OS specific image for you automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm stefanscherer/winspector microsoft/iis  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/01/winspector-mac.png" alt="run from mac"&gt;&lt;/p&gt;

&lt;h2 id="inspectingsomeimages"&gt;Inspecting some images&lt;/h2&gt;

&lt;p&gt;Now let's try winspector and inspect a random Docker image. We could start with the Windows base image itself.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm stefanscherer/winspector microsoft/windowsservercore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even for this image it can show you some details:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Image name: microsoft/windowsservercore  
Tag: latest  
Number of layers: 2  
Sizes of layers:  
  sha256:3889bb8d808bbae6fa5a33e07... - 4069985900 byte
  sha256:3430754e4d171ead00cf67667... - 913145061 byte
Total size (including Windows base layers): 4983130961 byte  
Application size (w/o Windows base layers): 0 byte  
Windows base image used:  
  microsoft/windowsservercore:10.0.14393.447 full
  microsoft/windowsservercore:10.0.14393.693 update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the latest windowsservercore image has two layers. The sizes shown here are the download sizes of the compressed layers. The smaller one is the layer that will be replaced by a newer update layer with the next release.&lt;/p&gt;

&lt;h2 id="howbigisthewinspectorimage"&gt;How big is the winspector image?&lt;/h2&gt;

&lt;p&gt;Now let's have a look at the winspector Windows image to see what winspector can retrieve for you.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm stefanscherer/winspector stefanscherer/winspector:windows-1.4.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The (shortened) output looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Image name: stefanscherer/winspector  
Tag: windows-1.4.3  
Number of layers: 14  
Schema version: 1  
Architecture: amd64  
Created: 2017-01-15 21:35:22 with Docker 1.13.0-rc7 on windows 10.0.14393.693  
Sizes of layers:  
  ...

Total size (including Windows base layers): 360497565 byte  
Application size (w/o Windows base layers): 27188879 byte  
Windows base image used:  
  microsoft/nanoserver:10.0.14393.447 full
  microsoft/nanoserver:10.0.14393.693 update
History:  
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the winspector Windows image is about 27 MByte and it uses the latest nanoserver base image.&lt;/p&gt;

&lt;h2 id="inspectinglinuximages"&gt;Inspecting Linux images&lt;/h2&gt;

&lt;p&gt;And winspector is not restricted to Windows images, you can inspect Linux images as well.&lt;/p&gt;

&lt;p&gt;If you run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm stefanscherer/winspector stefanscherer/winspector:linux-1.4.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then winspector will show you&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Image name: stefanscherer/winspector  
Tag: linux-1.4.3  
Number of layers: 8  
Schema version: 1  
Architecture: amd64  
Created: 2017-01-15 21:34:21 with Docker 1.12.3 on linux  
Sizes of layers:  
  ...
Total size (including Windows base layers): 32708231 byte  
Application size (w/o Windows base layers): 32708231 byte  
Windows base image used:  
  It does not seem to be a Windows image
History:  
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see the Linux image is about 32 MByte.&lt;/p&gt;

&lt;p&gt;So once you have downloaded the latest Windows base images like windowsservercore or nanoserver the download experience is the same for both platforms.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With winspector you can check any Windows container image on the Docker Hub which version of Windows it uses.&lt;/p&gt;

&lt;p&gt;You can also see how big each image layer is and learn how to optimize commands in your Dockerfile to create smaller Windows images.&lt;/p&gt;

&lt;p&gt;The tool is open source on GitHub at &lt;a href="https://github.com/StefanScherer/winspector"&gt;github.com/StefanScherer/winspector&lt;/a&gt;. It is community driven, so feel free to send me feedback in form of issues or pull requests. &lt;/p&gt;

&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Keep your Windows Containers up to date</title><description>&lt;p&gt;Last year in October Microsoft has released Windows Server 2016 and with it the official support for Windows Containers. If you have tried Windows Containers already and built some Windows Container images you may wonder how to implement an update strategy.&lt;/p&gt;

&lt;p&gt;How can I install Windows Updates in my container&lt;/p&gt;</description><link>https://stefanscherer.github.io/keep-your-windows-containers-up-to-date/</link><guid isPermaLink="false">9d05e734-fddc-452e-a760-13dd16defde7</guid><category>Windows</category><category>Docker</category><category>Container</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Sun, 08 Jan 2017 09:23:21 GMT</pubDate><content:encoded>&lt;p&gt;Last year in October Microsoft has released Windows Server 2016 and with it the official support for Windows Containers. If you have tried Windows Containers already and built some Windows Container images you may wonder how to implement an update strategy.&lt;/p&gt;

&lt;p&gt;How can I install Windows Updates in my container image?&lt;/p&gt;

&lt;p&gt;Working with containers is not the same as working with real servers or VM's you support for months or years. A container image is a static snapshot of the filesystem (and Windows registry and so on) at a given time.&lt;/p&gt;

&lt;p&gt;You won't enter a running container and run the Windows Update there. But how should we do it then?&lt;/p&gt;

&lt;h2 id="containerimageshavelayers"&gt;Container images have layers&lt;/h2&gt;

&lt;p&gt;First have a look how a container image looks like. It is not just a snapshot. A container image consist of multiple layers. When you look at your &lt;code&gt;Dockerfile&lt;/code&gt; you normally use a line like &lt;code&gt;FROM microsoft/windowsservercore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Your container image then uses the Windows base image that contains a layer with all the files needed to run Windows containers.&lt;/p&gt;

&lt;p&gt;If you have some higher level application you may use other prebuilt container images like &lt;code&gt;FROM microsoft/iis&lt;/code&gt; or &lt;code&gt;FROM microsoft/aspnet&lt;/code&gt;. These images also re-use the &lt;code&gt;FROM microsoft/windowsservercore&lt;/code&gt; as base image.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/01/windows_image_layers-2.png" alt="Windows app image layers"&gt;&lt;/p&gt;

&lt;p&gt;On top of that you build your own application image with your code and content needed to run the application in a self contained Windows container.&lt;/p&gt;

&lt;p&gt;Behind the scenes your application image now uses several layers that will be downloaded from the Docker Hub or any other container registry. Same layers can be re-used for different other images. If you build multiple ASP.NET appliations as Docker images they will re-use the same layers below.&lt;/p&gt;

&lt;p&gt;But now back to our first question: How to apply Windows Updates in a container image? &lt;/p&gt;

&lt;h2 id="thewindowsbaseimages"&gt;The Windows base images&lt;/h2&gt;

&lt;p&gt;Let's have a closer look at the Windows base images. Microsoft provides two base images: &lt;a href="https://hub.docker.com/r/microsoft/windowsservercore/"&gt;windowsservercore&lt;/a&gt; and &lt;a href="https://hub.docker.com/r/microsoft/nanoserver/"&gt;nanoserver&lt;/a&gt;. Both base images are updated on a regular basis to roll out all security fixes and bug fixes. You might know that the base image for windowsservercore is about 4 to 5 GByte to download.&lt;/p&gt;

&lt;p&gt;So do we have to download the whole base image each time for each update?&lt;/p&gt;

&lt;p&gt;If we look closer how the base images are built we see that they contain two layers: One big base layer that will be used for a longer period of time. And there is a smaller update layer that contains only the patched and updated files for the new release.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/01/windowsservercore_updates.gif" alt="Windows Server Core updates"&gt;&lt;/p&gt;

&lt;p&gt;So updating to a newer Windows base image version isn't painful as only the update layer must be pulled from the Docker Hub.&lt;/p&gt;

&lt;p&gt;But in the long term it does not make sense to stick forever to the old base layer. Security scanners will mark them as vulnerable and also all the images that are built from them. And the update layer will increase in size for each new release. So from time to time there is a "breaking" change that replaces the base layer and a new base layer will be used for upcoming releases. We have seen that with the latest release in December.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2017/01/windowsservercore_updates_all.gif" alt="Windows Server Core major update"&gt;&lt;/p&gt;

&lt;p&gt;From time to time you will have to download the big new base layer which is about 4 GByte for windowsservercore (and only about 240 MByte for nanoserver, so try to use nanoserver whereever you can) when you want to use the latest Windows image release.&lt;/p&gt;

&lt;h2 id="keeporupdate"&gt;Keep or update?&lt;/h2&gt;

&lt;p&gt;Should I avoid updating the Windows image to revision 576 to keep my downloads small? &lt;strong&gt;No!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My recommendation is to update all your Windows container images and rebuild them with the newest Windows image. You have to download that bigger base layer also &lt;strong&gt;only once&lt;/strong&gt; and all your container images will re-use it.&lt;/p&gt;

&lt;p&gt;Perhaps your application code also has some updates you want to ship. It's a good time to ship it on top of the newest Windows base image. So I recommend to run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker pull microsoft/windowsservercore  
docker pull microsoft/nanoserver  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;before you build new Windows container images to have the latest OS base image with all security fixes and bug fixes in it.&lt;/p&gt;

&lt;p&gt;If you want to keep track which version of the Windows image you use, you can use the tags provided for each release.&lt;/p&gt;

&lt;p&gt;Instead of using only the latest version in your &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM microsoft/windowsservercore  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can append the tag&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM microsoft/windowsservercore:10.0.14393.576  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I still recommend to update the tag after a new Windows image has been published.&lt;/p&gt;

&lt;p&gt;You can find the tags for &lt;a href="https://hub.docker.com/r/microsoft/windowsservercore/tags/"&gt;windowsservercore&lt;/a&gt; and &lt;a href="https://hub.docker.com/r/microsoft/nanoserver/tags/"&gt;nanoserver&lt;/a&gt; on the Docker Hub.&lt;/p&gt;

&lt;h2 id="whatabouttheframeworkimages"&gt;What about the framework images?&lt;/h2&gt;

&lt;p&gt;Typically you build your application on top of some kind of framework like &lt;a href="https://hub.docker.com/r/microsoft/aspnet/tags/"&gt;ASP.NET&lt;/a&gt;, &lt;a href="https://hub.docker.com/r/microsoft/iis/tags/"&gt;IIS&lt;/a&gt; or a runtime language like Node.js, &lt;a href="https://hub.docker.com/r/library/python/"&gt;Python&lt;/a&gt; and so on. You should have a look at the update cycles of these framework images. The maintainers have to rebuild the framework images after a new release of the Windows base image came out.&lt;/p&gt;

&lt;p&gt;If you see some of your framework images lag behind, encourage the maintainer to update the Windows base image and to rebuild the framework image.&lt;/p&gt;

&lt;p&gt;With such updated framework images - they hopefully come with a new version tag - you can rebuild your application.&lt;/p&gt;

&lt;h1 id="tldr"&gt;TL/DR&lt;/h1&gt;

&lt;p&gt;So your part to get Windows Updates into your Windows Container images is to choose the newer image in your &lt;code&gt;Dockerfile&lt;/code&gt; and rebuild your application image with it.&lt;/p&gt;

&lt;p&gt;If you haven't used version tags of the image below, do a &lt;code&gt;docker pull ...&lt;/code&gt; of that image to get sure to have the updated one before you rebuild.&lt;/p&gt;

&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>How to protect a Windows 2016 Docker engine with TLS</title><description>&lt;p&gt;Today I have started a Windows Server 2016 VM with Container support in Azure. This is pretty easy as there is a prebuilt VM with the Docker base images. But I want a secured connection from my laptop to the Windows Docker engine running in Azure.&lt;/p&gt;

&lt;p&gt;There is a tutorial&lt;/p&gt;</description><link>https://stefanscherer.github.io/protecting-a-windows-2016-docker-engine-with-tls/</link><guid isPermaLink="false">3c86eb6b-cf2a-4376-97dd-d2ec54bc5d67</guid><category>Docker</category><category>Windows</category><category>Azure</category><category>TLS</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Sun, 23 Oct 2016 22:35:19 GMT</pubDate><content:encoded>&lt;p&gt;Today I have started a Windows Server 2016 VM with Container support in Azure. This is pretty easy as there is a prebuilt VM with the Docker base images. But I want a secured connection from my laptop to the Windows Docker engine running in Azure.&lt;/p&gt;

&lt;p&gt;There is a tutorial &lt;a href="https://docs.docker.com/engine/security/https/"&gt;Protect the Docker daemon socket&lt;/a&gt; at the website of Docker which uses the &lt;code&gt;openssl&lt;/code&gt; tool to create all the certificates etc. But how should we do this on Windows?&lt;/p&gt;

&lt;h2 id="justcontainerizewhatsthere"&gt;Just containerize what's there&lt;/h2&gt;

&lt;p&gt;I have seen the &lt;a href="https://github.com/Microsoft/Virtualization-Documentation/tree/master/windows-server-container-tools/DockerTLS"&gt;DockerTLS&lt;/a&gt; script in a GitHub repo from Microsoft. But this script installs OpenSSL on my machine which I don't want to.&lt;/p&gt;

&lt;p&gt;My first thought was, let's put this script + OpenSSL into a Docker image and run it in a Windows container.&lt;/p&gt;

&lt;p&gt;So this &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/2e2a5b12252816744f5414e0621e12bb74b6f59c/dockertls/Dockerfile"&gt;Dockerfile&lt;/a&gt; was my first attempt to just use Chocolatey to install OpenSSL, download the PowerShell script from the Microsoft GitHub repo. Done. The script can run in a safe environment and I don't have to install software on my Docker host.&lt;/p&gt;

&lt;h2 id="dockertls"&gt;DockerTLS&lt;/h2&gt;

&lt;p&gt;But there is still work to do on the host to configure the Docker engine which I wanted to automate a little more. So it would be great to have a tool that can&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;generate all TLS certs&lt;/li&gt;
&lt;li&gt;create or update the Docker &lt;code&gt;daemon.json&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Put the client certs into my home directory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But still we need a program or script with OpenSSL to do that. I thought this tool should be deployed in a Docker image and shared on the Docker Hub. And here it is:&lt;/p&gt;

&lt;h2 id="dockerrundockertls"&gt;docker run dockertls&lt;/h2&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/10/dockertls.png" alt="dockertls"&gt;&lt;/p&gt;

&lt;p&gt;The script &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/master/dockertls/generate-certs.ps1"&gt;generate-certs.ps1&lt;/a&gt; creates the TLS certs and copies them to the folders that would be used on the Docker host. The script would directly work on a Docker host if you have OpenSSL/LibreSSL installed.&lt;/p&gt;

&lt;p&gt;The dockertls Docker image is created with this &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/master/dockertls/Dockerfile"&gt;Dockerfile&lt;/a&gt;. It installs LibreSSL from OpenBSD (thanks to &lt;a href="https://twitter.com/friism"&gt;Michael Friis&lt;/a&gt; for that optimization) and copies the PowerShell script inside the image.&lt;/p&gt;

&lt;p&gt;You can find the &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/tree/master/dockertls"&gt;full source code&lt;/a&gt; of the dockertls image in my &lt;a href="https://github.com/StefanScherer/dockerfiles-windows"&gt;dockerfiles-windows&lt;/a&gt; GitHub repo if you want to build the Docker image yourself.&lt;/p&gt;

&lt;p&gt;Otherwise you can just the &lt;a href="https://hub.docker.com/r/stefanscherer/dockertls-windows/"&gt;dockertls Docker image&lt;/a&gt; from the Docker Hub.&lt;/p&gt;

&lt;h3 id="dryrun"&gt;Dry run&lt;/h3&gt;

&lt;p&gt;As you don't trust me or my Docker image you can do a dry run with some temporary folders where the container can copy files into without destroying your Docker host.&lt;/p&gt;

&lt;p&gt;Just create two folders:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir server  
mkdir client\.docker  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the Windows container with the environment variables &lt;code&gt;SERVER_NAME&lt;/code&gt; and &lt;code&gt;IP_ADDRESSES&lt;/code&gt; as well as two volume mounts to write the certs back to the host:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm `  
  -e SERVER_NAME=$(hostname) `
  -e IP_ADDRESSES=127.0.0.1,192.168.254.123 `
  -v "$(pwd)\server:C:\ProgramData\docker" `
  -v "$(pwd)\client\.docker:C:\Users\ContainerAdministrator\.docker" `
  stefanscherer/dockertls-windows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards check the folders:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dir server\certs.d  
dir server\config  
dir client\.docker  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will see that there are three pem files for the server, the &lt;code&gt;daemon.json&lt;/code&gt; file as well as three pem files for the client.&lt;/p&gt;

&lt;p&gt;Of course you could manually copy the files and try them out. But this Docker image can do this for you as well.&lt;/p&gt;

&lt;h3 id="fullrun"&gt;Full run&lt;/h3&gt;

&lt;p&gt;You may have to create the &lt;code&gt;.docker&lt;/code&gt; folder in your home directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir $env:USERPROFILE\.docker  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run the container with the correct paths on the host so it can copy all certs and configs to the right place. The script can read an existing &lt;code&gt;daemon.json&lt;/code&gt; and update it to keep all other configuration untouched.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --rm `  
  -e SERVER_NAME=$(hostname) `
  -e IP_ADDRESSES=127.0.0.1,192.168.254.123 `
  -v "C:\ProgramData\docker:C:\ProgramData\docker" `
  -v "$env:USERPROFILE\.docker:C:\Users\ContainerAdministrator\.docker" `
  stefanscherer/dockertls-windows
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have to restart the Docker service in an administrator Shell with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;restart-service docker  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One last step is needed on your host. You have to open the port 2376 in your firewall so you can access the machine from the outside. But then you're done on your host.&lt;/p&gt;

&lt;p&gt;You can recreate the TLS certs with the same command and just restart the Docker service afterwards.&lt;/p&gt;

&lt;h3 id="testtlsconnection"&gt;Test TLS connection&lt;/h3&gt;

&lt;p&gt;Now test the connection to the TLS secured Docker service with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker --tlsverify `  
  --tlscacert=$env:USERPROFILE\.docker\ca.pem `
  --tlscert=$env:USERPROFILE\.docker\cert.pem `
  --tlskey=$env:USERPROFILE\.docker\key.pem `
  -H=tcp://127.0.0.1:2376 version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or just set some environment variables&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$env:DOCKER_HOST="tcp://127.0.0.1:2376"
$env:DOCKER_TLS_VERIFY="1"
docker version  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="azure"&gt;Azure&lt;/h3&gt;

&lt;p&gt;In an Azure VM you should use your DNS name for the VM in the &lt;code&gt;SERVER_NAME&lt;/code&gt; environment variable and your public and local IP addresses of that machine.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/10/dockertls-run---Kopie.png" alt="docker-run"&gt;&lt;/p&gt;

&lt;p&gt;You have to open the firewall port 2376 on your Windows Docker host.&lt;/p&gt;

&lt;p&gt;For Azure you also have to add a incoming rule for port 2376 in your network security group.&lt;/p&gt;

&lt;p&gt;Then you have to securely transfer the three client pem files from your Azure VM to your laptop.&lt;/p&gt;

&lt;p&gt;I've done that on my old Windows 10 machine which is only a 32bit machine, but I still can work with the Windows 2016 Docker engine running in Azure.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/10/dockertls-1.png" alt="docker-version"&gt;&lt;/p&gt;

&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Run Linux and Windows Containers on Windows 10</title><description>&lt;p&gt;At DockerCon 2016 in Seattle Docker announced the public beta of &lt;strong&gt;Docker for Windows&lt;/strong&gt;. With this you can work with Docker running &lt;strong&gt;Linux containers&lt;/strong&gt; in a very easy way on Windows 10 Pro with Hyper-V installed. In the meantime there is a &lt;a href="https://docs.docker.com/docker-for-windows/"&gt;stable version and a beta channel&lt;/a&gt; to retrieve&lt;/p&gt;</description><link>https://stefanscherer.github.io/run-linux-and-windows-containers-on-windows-10/</link><guid isPermaLink="false">e2bf3024-b5bb-4393-890b-dd5b65895e78</guid><category>Docker</category><category>Windows</category><category>Linux</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Sat, 24 Sep 2016 12:55:29 GMT</pubDate><content:encoded>&lt;p&gt;At DockerCon 2016 in Seattle Docker announced the public beta of &lt;strong&gt;Docker for Windows&lt;/strong&gt;. With this you can work with Docker running &lt;strong&gt;Linux containers&lt;/strong&gt; in a very easy way on Windows 10 Pro with Hyper-V installed. In the meantime there is a &lt;a href="https://docs.docker.com/docker-for-windows/"&gt;stable version and a beta channel&lt;/a&gt; to retrieve newer versions.&lt;/p&gt;

&lt;p&gt;And Microsoft has added the &lt;strong&gt;Containers feature&lt;/strong&gt; in the Windows 10 Anniversary Update. With some &lt;a href="https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start_windows_10"&gt;installation steps&lt;/a&gt; you are able to run &lt;strong&gt;Windows Hyper-V Containers&lt;/strong&gt; on your Windows 10 machine.&lt;/p&gt;

&lt;p&gt;But there is a little bit of confusion which sort of containers can be started with each of the two installations. And you can't run both Docker Engines side-by-side without some adjustments.&lt;/p&gt;

&lt;p&gt;This is because each of the installations use the same default named pipe &lt;code&gt;//./pipe/docker_engine&lt;/code&gt; causing one of the engines to fail to start.&lt;/p&gt;

&lt;h2 id="beta26torulethemall"&gt;Beta 26 to rule them all&lt;/h2&gt;

&lt;p&gt;Beginning with the Docker for Windows Beta 26 there is a very easy approach to solve this confusion. You only have to install Docker for Windows with the MSI installer. There is a new menu item in the Docker tray icon to switch between Linux and Windows containers.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/09/docker-for-windows-switch.gif" alt="switching"&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the video you don't have to change environment variables or use the &lt;code&gt;-H&lt;/code&gt; option of the Docker client to talk to the other Docker engine.&lt;/p&gt;

&lt;p&gt;So if you download &lt;a href="https://docs.docker.com/docker-for-windows/"&gt;Docker for Windows beta&lt;/a&gt; or switch to the beta channel in your installation you can try this out yourself.&lt;/p&gt;

&lt;p&gt;The installer will activate the &lt;strong&gt;Containers&lt;/strong&gt; feature if you haven't done that yet. A reboot is required for this to add this feature.&lt;/p&gt;

&lt;p&gt;From now on you can easily switch with the menu item in the tray icon.&lt;/p&gt;

&lt;p&gt;There also is a command line tool to switch the engine. In a PowerShell windows you can type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp; 'C:\Program Files\Docker\Docker\DockerCli.exe' -SwitchDaemon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it switches from Linux to Windows or vice versa. Take care and type the option as shown here as the option is case sensitive.&lt;/p&gt;

&lt;h2 id="proxyfortherescue"&gt;Proxy for the rescue&lt;/h2&gt;

&lt;p&gt;But how does the switching work without the need to use another named pipe or socket from the Docker client?&lt;/p&gt;

&lt;p&gt;The answer is that there is running a Proxy process &lt;code&gt;com.docker.proxy.exe&lt;/code&gt; which listens on the default named pipe &lt;code&gt;//./pipe/docker_engine&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you switch from Linux to Windows the Windows Docker engine &lt;code&gt;dockerd.exe&lt;/code&gt; will be started for you which is listening on another named pipe &lt;code&gt;//./pipe/docker_engine_windows&lt;/code&gt; and a new started Proxy process redirects to this.&lt;/p&gt;

&lt;h3 id="underthehood"&gt;Under the hood&lt;/h3&gt;

&lt;p&gt;I have installed the &lt;a href="https://technet.microsoft.com/sysinternals/bb896645"&gt;Sysinternals Process Monitor&lt;/a&gt; tool to learn what happens while switching from Linux to Windows containers. With the Process Tree function you can see a timeline with green bars when each process has started or exited.&lt;/p&gt;

&lt;p&gt;The following screenshot shows the processes before and after the switch. I have switched about in the middle of the green bar.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/09/switch-to-windows-dockerd.png" alt=""&gt;&lt;/p&gt;

&lt;p&gt;The current &lt;code&gt;com.docker.proxy.exe&lt;/code&gt; (above &lt;code&gt;dockerd.exe&lt;/code&gt; in the list) that talked to the MobyLinuxVM exits as the dark green bar highlights that.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dockerd.exe&lt;/code&gt; Windows Docker engine is started, as well as a new &lt;code&gt;com.docker.proxy.exe&lt;/code&gt; (below &lt;code&gt;dockerd.exe&lt;/code&gt;) which talks to the Windows Docker engine.&lt;/p&gt;

&lt;p&gt;So just after the switch you still can use the &lt;code&gt;docker.exe&lt;/code&gt; Client or your Docker integration in your favorite editor or IDE without any environment changes.&lt;/p&gt;

&lt;h2 id="runningbothcontainerworldsinparallel"&gt;Running both container worlds in parallel&lt;/h2&gt;

&lt;p&gt;The proxy process just switches the connection to the Docker engine. After such a switch both the Linux and Windows Docker engine are running.&lt;/p&gt;

&lt;h3 id="runalinuxwebserver"&gt;Run a Linux web server&lt;/h3&gt;

&lt;p&gt;To try this out we first switch back to the Linux containers. Now we run the default nginx web server on port 80&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -p 80:80 -d nginx  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then switch to the Windows containers with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;amp; 'C:\Program Files\Docker\Docker\DockerCli.exe' -SwitchDaemon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/09/docker-run-nginx.png" alt="docker-run-nginx"&gt;&lt;/p&gt;

&lt;p&gt;Now let's run some Windows containers. But first we try if the Linux container is still running and reachable with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;start http://localhost  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the &lt;code&gt;start&lt;/code&gt; command you open Edge with the welcome page of the nginx running in a Linux container&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/09/nginx.png" alt="nginx"&gt;&lt;/p&gt;

&lt;p&gt;Yes, the Linux container is still running.&lt;/p&gt;

&lt;h2 id="buildawindowswebserver"&gt;Build a Windows web server&lt;/h2&gt;

&lt;p&gt;On Windows 10 you &lt;del&gt;only can run Nanoserver containers. There is no IIS docker image for Nanoserver&lt;/del&gt;. &lt;strong&gt;Ignite update&lt;/strong&gt;: You can run Nanoserver &lt;strong&gt;AND&lt;/strong&gt; windowsservercore containers on Windows 10.&lt;/p&gt;

&lt;p&gt;But to demo how simple nanoserver containers could be I'll keep the following sample as it is. So we create our own small Node.js web server. First we write the simple web server app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;notepad app.js  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enter this code as the mini web server in the file &lt;code&gt;app.js&lt;/code&gt; and save the file.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;var http = require('http');  
var port = 81;

function handleRequest(req, res) {  
  res.end('Hello from Windows container, path = ' + req.url);
}

var server = http.createServer(handleRequest);

server.listen(port);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we build a Windows Docker image with that application. We open another editor to create the &lt;code&gt;Dockerfile&lt;/code&gt; with this command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;notepad Dockerfile.  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enter this as the &lt;code&gt;Dockerfile&lt;/code&gt;. As you can see only the &lt;code&gt;FROM&lt;/code&gt; line is different from a typical Linux Dockerfile. This one uses a Windows base image from the Docker Hub.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM stefanscherer/node-windows:6.7.0-nano

COPY app.js app.js

CMD [ "node", "app.js" ]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the file and build the Docker image with the usual command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t webserver .  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the Windows web server as a Docker container with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -p 81:81 -d webserver  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/09/docker-run-webserver-1.png" alt="docker-run-webserver"&gt;&lt;/p&gt;

&lt;p&gt;At the moment you can't connect directly with 127.0.0.1 to the container. But it is possible to use the IP address of the container. We need the ID or name of the container, so list the containers running with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker ps  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then open the browser with the container's IP address:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;start http://$(docker inspect -f "{{ .NetworkSettings.Networks.nat.IPAddress }}" grave_thompson):81  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/09/docker-inspect.png" alt="docker-inspect"&gt;&lt;/p&gt;

&lt;p&gt;Additionally the port forwarding from the host to the container allows you to contact the web server on port 81 from another machine.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/09/curl-to-windows-10.png" alt="curl-to-windows-10"&gt;&lt;/p&gt;

&lt;p&gt;And yes, the Windows container is also handling requests.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The new Docker for Windows beta combines the two container worlds and simplifies building Docker images for both Linux and Windows, making a Windows 10 machine a good development platform for both.&lt;/p&gt;

&lt;p&gt;And with a little awareness when to switch to the right Docker engine, both Linux and Windows containers can run side-by-side.&lt;/p&gt;

&lt;p&gt;Please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title>Adding Hyper-V support to 2016 TP5 Docker VM</title><description>&lt;p&gt;Back in June I have attended the &lt;a href="http://2016.dockercon.com"&gt;DockerCon&lt;/a&gt; in Seattle. Beside lots of new features in Docker 1.12 we heard about &lt;a href="https://www.youtube.com/watch?v=A7ABdUmen9s"&gt;Windows Server and Docker&lt;/a&gt; and upcoming features in the Windows Docker engine. &lt;/p&gt;

&lt;p&gt;Another highlight for me after the conference was a visit at the Microsoft Campus in Redmond&lt;/p&gt;</description><link>https://stefanscherer.github.io/adding-hyper-v-support-to-2016-tp5-docker-vm/</link><guid isPermaLink="false">b8c0b0b0-ea77-4a52-982d-3d754c76a1de</guid><category>Packer</category><category>Vagrant</category><category>Docker</category><category>Windows</category><category>Hyper-V</category><category>DockerCon</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Thu, 04 Aug 2016 19:59:37 GMT</pubDate><content:encoded>&lt;p&gt;Back in June I have attended the &lt;a href="http://2016.dockercon.com"&gt;DockerCon&lt;/a&gt; in Seattle. Beside lots of new features in Docker 1.12 we heard about &lt;a href="https://www.youtube.com/watch?v=A7ABdUmen9s"&gt;Windows Server and Docker&lt;/a&gt; and upcoming features in the Windows Docker engine. &lt;/p&gt;

&lt;p&gt;Another highlight for me after the conference was a visit at the Microsoft Campus in Redmond to meet the Windows Container team around Taylor Brown. After a meeting and having lunch we talked about making my Packer template for a &lt;a href="https://github.com/StefanScherer/packer-windows/blob/my/windows_2016_docker.json"&gt;Windows Server 2016 TP5 Docker VM&lt;/a&gt; work with Hyper-V. At that time my packer template supported only VirtualBox and VMware with a &lt;a href="https://stefanscherer.github.io/setup-local-windows-2016-tp5-docker-vm/"&gt;blog post describing how to build it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/08/20160623_101541.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;So Patrick Lang from Microsoft and I started to have a look at the pull request &lt;a href="https://github.com/mitchellh/packer/pull/2576"&gt;mitchellh/packer#2576&lt;/a&gt; by Taliesin Sisson that adds a Hyper-V builder to Packer. After a couple of days (already back to Germany working in different time zones) we improved the template through &lt;a href="https://github.com/PatrickLang/packer-windows/commit/7e13d4799e28a3afb1e35b878e00394256011022"&gt;GitHub&lt;/a&gt; and finally got it working.&lt;/p&gt;

&lt;h2 id="packerbuildvagrantup"&gt;packer build, vagrant up&lt;/h2&gt;

&lt;p&gt;If you haven't heard about &lt;a href="https://www.packer.io"&gt;Packer&lt;/a&gt; and &lt;a href="https://www.vagrantup.com"&gt;Vagrant&lt;/a&gt; let me explain it with the following diagram. If you want to create a VM from an ISO file you normally click through your hypervisor UI and then follow the installation steps inside the VM.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/08/packer_vagrant.png" alt="packer build, vagrant up"&gt;&lt;/p&gt;

&lt;p&gt;With Packer you can automate that step building a VM from an ISO file, put all steps into a Packer template and then just share the template so others can just run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;packer build template.json  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our case the output is a Vagrant box. That is a compressed VM ready to be used with the next tool - Vagrant. It takes a Vagrant box, creates a copy of it to turn it on so you can work again and again with the same predefined VM that was built by Packer. You want to turn your VM on? Just type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant up  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You want to stop the VM after work? Just type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant halt  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You want to try something out and want to undo all that to start over with the clean state. Just destroy it and start it again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant destroy  
vagrant up  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are much more commands and even snapshots can be used. The advantage is that you don't have to know all the buttons in your hypervisor. Both Packer and Vagrant are available for &lt;strong&gt;Windows, Mac and Linux&lt;/strong&gt; and also &lt;strong&gt;support &lt;a href="http://www.slideshare.net/PuppetLabs/multiprovider-vagrant"&gt;multiple hypervisors&lt;/a&gt;&lt;/strong&gt; and even cloud providers.&lt;/p&gt;

&lt;p&gt;So you only have to learn one or both of these tools and you're done if you have to work with VM's.&lt;/p&gt;

&lt;h2 id="addinghypervbuilder"&gt;Adding Hyper-V builder&lt;/h2&gt;

&lt;p&gt;The Packer template for a VM has one or more builder sections. The Hyper-V section looks like this and contains the typical steps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding files for a virtual floppy for the first boot&lt;/li&gt;
&lt;li&gt;Defining disk size, memory and CPU's&lt;/li&gt;
&lt;li&gt;How to login into the VM&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-json"&gt;    {
      "vm_name":"WindowsServer2016TP5Docker",
      "type": "hyperv-iso",
      "disk_size": 41440,
      "boot_wait": "0s",
      "headless": false,
      "guest_additions_mode":"disable",
      "iso_url": "{{user `iso_url`}}",
      "iso_checksum_type": "{{user `iso_checksum_type`}}",
      "iso_checksum": "{{user `iso_checksum`}}",
      "floppy_files": [
        "./answer_files/2016/Autounattend.xml",
        "./floppy/WindowsPowershell.lnk",
        "./floppy/PinTo10.exe",
        "./scripts/disable-winrm.ps1",
        "./scripts/docker/enable-winrm.ps1",
        "./scripts/microsoft-updates.bat",
        "./scripts/win-updates.ps1"
      ],
      "communicator":"winrm",
      "winrm_username": "vagrant",
      "winrm_password": "vagrant",
      "winrm_timeout" : "4h",
      "shutdown_command": "shutdown /s /t 10 /f /d p:4:1 /c \"Packer Shutdown\"",
      "ram_size_mb": 2048,
      "cpu": 2,
      "switch_name":"{{user `hyperv_switchname`}}",
      "enable_secure_boot":true
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Packer can also download ISO files from a download link to make automation very easy. &lt;/p&gt;

&lt;p&gt;The installation of a Windows Server 2016 VM can be automated with an &lt;a href="https://github.com/StefanScherer/packer-windows/blob/my/answer_files/2016/Autounattend.xml"&gt;&lt;code&gt;Autounattend.xml&lt;/code&gt;&lt;/a&gt; file. This file contains information to setup the Windows VM until the WinRM service is up and running and Packer can login from the host machine to run further provision scripts to setup the VM with additional installations.&lt;/p&gt;

&lt;p&gt;In case of the Windows Server 2016 TP5 Docker VM we additionally &lt;a href="https://github.com/StefanScherer/packer-windows/blob/my/scripts/docker/install-docker.ps1"&gt;install Docker 1.12&lt;/a&gt; and pull the Windows base OS docker images into the VM.&lt;/p&gt;

&lt;p&gt;All these steps defined in the Packer template build a good Vagrant box to have Docker preinstalled with the base docker image as it takes some time to download it the first time.&lt;/p&gt;

&lt;p&gt;So after a &lt;code&gt;vagrant destroy&lt;/code&gt; you still have the Windows OS docker images installed and can work with a clean installation again. Only from time to time when there is a new OS docker image version you have to rebuild your Vagrant box with Packer.&lt;/p&gt;

&lt;h2 id="buildthehypervvagrantbox"&gt;Build the Hyper-V Vagrant box&lt;/h2&gt;

&lt;p&gt;To build the Vagrant box locally on a Windows 10 machine you only need the &lt;strong&gt;Hyper-V feature&lt;/strong&gt; activated and you need a &lt;strong&gt;special version of &lt;code&gt;packer.exe&lt;/code&gt;&lt;/strong&gt; (notice: with &lt;code&gt;choco install packer&lt;/code&gt; you only get the upstream packer where the hyperv builder is not integrated yet). The packer.exe with hyperv builder can be downloaded at &lt;a href="https://dl.bintray.com/taliesins/Packer/"&gt;https://dl.bintray.com/taliesins/Packer/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Clone my packer template from GitHub and build it with these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/StefanScherer/packer-windows  
cd packer-windows  
packer build --only=hyperv-iso windows_2016_docker.json  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will take some time downloading and caching the ISO file, booting, installing the software and pulling the first Docker images.&lt;/p&gt;

&lt;h2 id="sharevagrantboxeswithatlas"&gt;Share Vagrant boxes with Atlas&lt;/h2&gt;

&lt;p&gt;Another advantage of Vagrant is that you can share Vagrant base boxes through Atlas, a service by HashiCorp. So only one has to run Packer and build the Vagrant box and provide it for other team members or the community.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/08/packer_vagrant_atlas.png" alt="packer atlas vagrant"&gt;&lt;/p&gt;

&lt;p&gt;Others can create a &lt;code&gt;Vagrantfile&lt;/code&gt; with the box name of one of the provided Vagrant boxes. That name will be used at the first &lt;code&gt;vagrant up&lt;/code&gt; to download the correct Vagrant box for the hypervisor to be used.&lt;/p&gt;

&lt;p&gt;Even Microsoft has its first &lt;a href="https://atlas.hashicorp.com/Microsoft/boxes/EdgeOnWindows10"&gt;Vagrant box at Atlas&lt;/a&gt; which can be used with VirtualBox only at the moment. But it is only a matter of time that more Hyper-V based Vagrant boxes will show up in Atlas, also boxes for other hypervisors.&lt;/p&gt;

&lt;p&gt;If you don't have a Vagrantfile you even can create a simple one to start a new test environment with two commands and a suitable Vagrant box from Atlas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant init Microsoft/EdgeOnWindows10  
vagrant up --provider virtualbox  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrant itself can log into the VM through WinRM and run further provision scripts to setup a good development or test environment. It is just a decision what to install in a Vagrant box with Packer and what to install with Vagrant afterwards. You decide which flexibility you want or if you prefer a faster &lt;code&gt;vagrant up&lt;/code&gt; experience with a full provisioned Vagrant box that was built with a longer running Packer build once.&lt;/p&gt;

&lt;h2 id="dockerwindowsbox"&gt;docker-windows-box&lt;/h2&gt;

&lt;p&gt;If you are looking for a test environment for Windows Docker containers you might have a look at my &lt;a href="https://github.com/StefanScherer/docker-windows-box"&gt;docker-windows-box&lt;/a&gt; GitHub repo that installs Git and some additional Docker tools to get started working on some &lt;a href="https://github.com/StefanScherer/dockerfiles-windows"&gt;Windows Dockerfiles&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/08/docker-windows-box.png" alt="docker windows box"&gt;&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I'm happy that there is a Hyper-V builder for Packer that really works. Vagrant already has a Hyper-V provider built in so you can have the same experience running and working with VM's as others have with VMware or VirtualBox.&lt;/p&gt;

&lt;p&gt;With a such a TP5 Vagrant box it is very easy to get in touch with Windows Docker Containers, regardless if you are working on Windows 10 with Hyper-V or from your Mac or Linux machine with another hypervisor.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://stefanscherer.github.io/content/images/2016/08/packer_multiprovider.png" alt="Packer multiprovider"&gt;&lt;/p&gt;

&lt;p&gt;Please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;</content:encoded></item></channel></rss>