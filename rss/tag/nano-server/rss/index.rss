<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Nano Server - Stefan Scherer's Blog</title><description>Just my techie notes.</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>Nano Server - Stefan Scherer's Blog</title><link>http://localhost:2368/</link></image><generator>Ghost 1.8</generator><lastBuildDate>Sun, 21 Jan 2018 18:06:22 GMT</lastBuildDate><atom:link href="http://localhost:2368/tag/nano-server/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Exploring new NanoServer Insider images</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Last week the first Insider preview container images appeared on the Docker Hub. They promise us much smaller sizes to have more lightweight Windows images for our applications.&lt;/p&gt;
&lt;p&gt;To use these Insider container images you also need an Insider preview of Windows Server 2016 or Windows 10. Yes, this is&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/exploring-new-nanoserver-insider-images/</link><guid isPermaLink="false">5986d4ec688a490001540975</guid><category>Docker</category><category>Windows</category><category>Nano Server</category><category>Node.js</category><category>Vagrant</category><category>Packer</category><category>Docker Hub</category><category>Insider</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Tue, 18 Jul 2017 09:42:41 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Last week the first Insider preview container images appeared on the Docker Hub. They promise us much smaller sizes to have more lightweight Windows images for our applications.&lt;/p&gt;
&lt;p&gt;To use these Insider container images you also need an Insider preview of Windows Server 2016 or Windows 10. Yes, this is another great announcement that you can get early access and give feedback to the upcoming version of Windows Server. So let's grab it.&lt;/p&gt;
&lt;h2 id="windowsserverinsider"&gt;Windows Server Insider&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Register at Windows Insider program &lt;a href="https://insider.windows.com"&gt;https://insider.windows.com&lt;/a&gt; and join the Windows Server Insider program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the Windows Server Insider preview ISO from &lt;a href="https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewserver"&gt;https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewserver&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you can create a VM and install Docker. You can either build the VM manually and follow the docs &lt;a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/using-insider-container-images"&gt;&amp;quot;Using Insider Container Images&amp;quot;&lt;/a&gt; how to install Docker and pull the Insider container images. Or you can use my Packer template and Vagrant environment to automate these steps. The walkthrough is described at&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/StefanScherer/insider-docker-machine"&gt;https://github.com/StefanScherer/insider-docker-machine&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="windowsinsiderimages"&gt;Windows Insider images&lt;/h2&gt;
&lt;p&gt;There are four new Docker images available with a much smaller footprint.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/07/windows_insider_images.png" alt="Windows Insider images"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;microsoft/windowsservercore-insider&lt;/li&gt;
&lt;li&gt;microsoft/nanoserver-insider&lt;/li&gt;
&lt;li&gt;microsoft/nanoserver-insider-dotnet&lt;/li&gt;
&lt;li&gt;microsoft/nanoserver-insider-powershell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Windows Server Core Insider image got down from 5 GB to only 2 GB which saves a lot of bandwidth and download time.&lt;/p&gt;
&lt;p&gt;You may wonder why there are three Nano Server Insider images and why there is one without PowerShell.&lt;/p&gt;
&lt;h2 id="aimingthesmallestwindowsbaseimage"&gt;Aiming the smallest Windows base image&lt;/h2&gt;
&lt;p&gt;If we compare the image sizes of the current &lt;code&gt;microsoft/nanoserver&lt;/code&gt; image with its base layer and update layer with the new Insider images you can see the reason.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/07/nanoserver_sizes.png" alt="NanoServer sizes"&gt;&lt;/p&gt;
&lt;p&gt;If you want to ship your application in a container image you don't want to ship a whole operating system, but only the parts needed to run the application.&lt;/p&gt;
&lt;p&gt;And to ship faster is to ship smaller images. For many applications you do not need eg. PowerShell inside your base image at runtime which would take another 54 MByte to download from the Docker registry.&lt;/p&gt;
&lt;p&gt;Let's have a look at current Windows Docker images available on the Docker Hub. To run a Golang webserver for example on an empty Windows Docker host you have to pull the 2MB binary and the two NanoServer base layers with hundreds of MB to run it in a container.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/07/docker-pull-whoami.png" alt="docker pull whoami"&gt;&lt;/p&gt;
&lt;p&gt;Of course these base images have to be downloaded only once as other NanoServer container images will use the same base image. But if you work with Windows containers for a longer time you may have noticed that you still have to download different update layers from time to time that pull another 122 MB.&lt;/p&gt;
&lt;p&gt;And if the NanoServer base image is much smaller then the updates also will be smaller and faster to download.&lt;/p&gt;
&lt;p&gt;With the new Insider container images you can build and run containerized .NET core applications that are still smaller than the NanoServer + PowerShell base image.&lt;/p&gt;
&lt;h2 id="nodejs"&gt;Node.js&lt;/h2&gt;
&lt;p&gt;Another example is providing a Node.js container image based on the new NanoServer Insider image with only 92 MByte. We have just cut off &amp;quot;3&amp;quot; hundred MB.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/07/nodejs_nanoserver_sizes-3.png" alt="Node.js NanoServer sizes"&gt;&lt;/p&gt;
&lt;p&gt;If we compare that with some of the Linux Node.js container images we are at about the size of the the slim images.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/07/Bildschirmfoto-2017-07-14-um-08.53.24.png" alt="Node.js slim image sizes"&gt;&lt;/p&gt;
&lt;h2 id="multistagebuild"&gt;Multi-stage build&lt;/h2&gt;
&lt;p&gt;To build such small Windows images comes with a cost. You have to live without PowerShell. But the new multi-stage build introduced with Docker 17.05 really helps you and you can use PowerShell before the final image layers are built.&lt;/p&gt;
&lt;p&gt;If you haven't heard about multi-stage builds its concept is to have multiple &lt;code&gt;FROM&lt;/code&gt; instructions in a &lt;code&gt;Dockerfile&lt;/code&gt;. Only the last &lt;code&gt;FROM&lt;/code&gt; until the end of the file will build the final container image. This is also called the last stage. In all the other stages you don't have to optimze too much and can use the build cache much better. You can read more about &lt;a href="https://blog.docker.com/2017/07/multi-stage-builds/"&gt;multi-stage builds&lt;/a&gt; at the Docker Blog.&lt;/p&gt;
&lt;p&gt;Let's have a closer look how to build a small Node.js base image. You can find the complete &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/07cedcf2cc93e669bba9c961121feda6f43dab59/node/8.1/nano/Dockerfile"&gt;Dockerfile&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;p&gt;In the first stage I'm lazy and even use the &lt;code&gt;microsoft/windowsservercore-insider&lt;/code&gt; image. The reason is that I'm using the GPG tools to verify the downloads and these tools don't run quiet well in NanoServer at the moment.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;# escape=`
FROM microsoft/windowsservercore-insider as download
SHELL [&amp;quot;powershell&amp;quot;, &amp;quot;-Command&amp;quot;, &amp;quot;$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';&amp;quot;]
RUN Invoke-WebRequest ... 
RUN Expand-Archive ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; has a second &lt;code&gt;FROM&lt;/code&gt; instruction which then uses the smallest Windows base image. In that stage you normally &lt;code&gt;COPY&lt;/code&gt; deploy files and folders from previous stages. In our case we copy the Node.js installation folder into the final image.&lt;/p&gt;
&lt;p&gt;The one &lt;code&gt;RUN&lt;/code&gt; instruction sets the &lt;code&gt;PATH&lt;/code&gt; environment variable with the &lt;code&gt;setx&lt;/code&gt; command instead of PowerShell commands.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM microsoft/nanoserver-insider
ENV NPM_CONFIG_LOGLEVEL info
COPY --from=download /nodejs /nodejs
RUN setx PATH &amp;quot;%PATH%;C:\nodejs;%APPDATA%\npm&amp;quot;
CMD [ &amp;quot;node.exe&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Users of such a Node.js base image can work as usual by &lt;code&gt;COPY&lt;/code&gt; deploy their source tree and node_modules folder into that image and run the application as a small container.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM stefanscherer/node-windows:8.1.4-insider
WORKDIR /code
COPY . /code
CMD [&amp;quot;node.exe&amp;quot;, &amp;quot;app.js&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So all you have to do is change the &lt;code&gt;FROM&lt;/code&gt; instruction to the smaller insider Node.js image.&lt;/p&gt;
&lt;h2 id="furtherinsiderimages"&gt;Further Insider images&lt;/h2&gt;
&lt;p&gt;I have pushed some of my first Insider images to the Docker Hub so it may be easier for you to try out different languages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stefanscherer/node-windows:6.11.1-insider&lt;/li&gt;
&lt;li&gt;stefanscherer/node-windows:8.1.4-insider&lt;/li&gt;
&lt;li&gt;stefanscherer/golang-windows:1.8.3-insider&lt;/li&gt;
&lt;li&gt;stefanscherer/dockertls-windows:insider&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to see how these images are built, then you can find the &lt;code&gt;Dockerfiles&lt;/code&gt; in the latest pull requests of my &lt;a href="https://github.com/StefanScherer/dockerfiles-windows"&gt;https://github.com/StefanScherer/dockerfiles-windows&lt;/a&gt; repo.&lt;/p&gt;
&lt;h2 id="dockervolumes"&gt;Docker Volumes&lt;/h2&gt;
&lt;p&gt;If you have worked with Docker Volumes on Windows you may know this already. Node.js and other tools and languages have problems when they want to get the real name of a file or folder that is mapping from the Docker host into the container.&lt;/p&gt;
&lt;p&gt;Node.js for example thinks the file is in the folder &lt;code&gt;C:\ContainerMappedDirectories&lt;/code&gt;, but cannot find the file there. There is a workaround described in Elton Stoneman's blog post &lt;a href="https://blog.sixeyed.com/docker-volumes-on-windows-the-case-of-the-g-drive/"&gt;&amp;quot;Introducing the 'G' Drive&amp;quot;&lt;/a&gt; to map it to another drive letter.&lt;/p&gt;
&lt;p&gt;With the new Insider preview I see a great improvement on that topic. Running normal Windows containers without the HyperV isolation there is no longer a symbolic link.&lt;/p&gt;
&lt;p&gt;If we run the Node.js container interactively and map the folder &lt;code&gt;C:\code&lt;/code&gt; into the container we can list the &lt;code&gt;C:&lt;/code&gt;drive and see that the &lt;code&gt;code&lt;/code&gt; folder is a normal directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -v C:\code:C:\code stefanscherer/node-windows:8.1.4-insider cmd /c dir
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/07/docker-run-nodejs.png-shadow.png" alt="docker run volume"&gt;&lt;/p&gt;
&lt;p&gt;With this setup you are able to mount your source code into the Node.js container and run it eg. with &lt;code&gt;nodemon&lt;/code&gt; to live reload it after changing it on the host.&lt;/p&gt;
&lt;p&gt;Unfortunately this is not available with the Hyper-V isolation that is the default on Windows 10 Insider machines.&lt;/p&gt;
&lt;p&gt;Running the same command with &lt;code&gt;--isolation=hyperv&lt;/code&gt; shows the symlinked directory which Node.js cannot handle at the moment.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -v C:\code:C:\code --isolation=hyperv stefanscherer/node-windows:8.1.4-insider cmd /c dir
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/07/docker-run-nodejs-hyperv.png-shadow.png" alt="docker run volume hyperv"&gt;&lt;/p&gt;
&lt;p&gt;But this improvement in native Windows containers looks very promising to solve a lot of headache for all the maintainers of Git for Windows, Golang, Node.js and so on.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Having smaller Windows container images is a huge step forward. I encourage you to try out the much smaller images. You'll learn how it feels to work with them and you can give valuable feedback to the Microsoft Containers team shaping the next version of Windows Server.&lt;/p&gt;
&lt;p&gt;Can we make even smaller images? I don't know, but let's find it out. How about naming the new images? Please make suggestions at the Microsoft Tech Community &lt;a href="https://techcommunity.microsoft.com"&gt;https://techcommunity.microsoft.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please use the comments below if you have further ideas, questions or improvements to share. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt; to stay up to date with Windows containers.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>How to build a Node.js Nano Server Docker base image</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Beginning with &lt;strong&gt;Windows 10 Insider&lt;/strong&gt; 14342 you can enable the new &lt;strong&gt;Containers feature&lt;/strong&gt; in Windows. This allows you to run Windows Containers directly in Windows 10 as Hyper-V containers. At the moment only NanoServer containers are supported. So it's time to get used to NanoServer and how to create some&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/how-to-build-nodejs-nanoserver-image/</link><guid isPermaLink="false">5986d4ec688a490001540967</guid><category>Docker</category><category>Nano Server</category><category>Windows 10</category><category>Node.js</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Sun, 29 May 2016 18:00:53 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Beginning with &lt;strong&gt;Windows 10 Insider&lt;/strong&gt; 14342 you can enable the new &lt;strong&gt;Containers feature&lt;/strong&gt; in Windows. This allows you to run Windows Containers directly in Windows 10 as Hyper-V containers. At the moment only NanoServer containers are supported. So it's time to get used to NanoServer and how to create some base images.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/05/windows10-containers-feature.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;In this blog post I'll show how to build small base images to deploy Node.js applications as NanoServer Docker images that you can run &lt;a href="https://msdn.microsoft.com/en-us/virtualization/windowscontainers/quick_start/quick_start_windows_10"&gt;in Windows 10&lt;/a&gt; or in Windows Server 2016 TP5.&lt;/p&gt;
&lt;h2 id="whatisnanoserver"&gt;What is Nano Server?&lt;/h2&gt;
&lt;p&gt;Each Docker image must use of of the two OS images: &lt;code&gt;windowsservercore&lt;/code&gt; or &lt;code&gt;nanoserver&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;Windows Server Core&lt;/strong&gt; image is &lt;strong&gt;highly compatible&lt;/strong&gt; with previous Windows Server Core installations. You don't have a GUI, but you can install almost everything into it. But this compatibility comes with a prize, the size of the OS image is about 9.3 GByte as it contains about a whole server.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;Nano Server&lt;/strong&gt; image is &lt;strong&gt;highly optimized&lt;/strong&gt; and almost everything was taken out of it to be able to deploy more of these containers in cloud servers. The size is about 817 MByte. This makes installing Docker on Windows 10 much faster than with the &lt;code&gt;windowsservercore&lt;/code&gt; OS image.&lt;/p&gt;
&lt;p&gt;So if you get asked which to choose you probably would answer to take the smaller one.&lt;/p&gt;
&lt;h2 id="thechallengemsipackages"&gt;The challenge: MSI packages&lt;/h2&gt;
&lt;p&gt;But as soon as you try to write a &lt;code&gt;Dockerfile&lt;/code&gt; to install some software into a Docker image you will notice that the minimized OS comes with a new challenge. &lt;strong&gt;You can't install MSI packages in Nano Server.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you look at &lt;a href="https://nodejs.org"&gt;nodejs.org&lt;/a&gt; there are only MSI packages for Windows if you also want to have npm installed.&lt;/p&gt;
&lt;p&gt;So how could we build a Node.js Docker image based on Nano Server? I've tried different ways, eg. also installing tools like lessmsi while building the Nano Server image only to find out that lessmsi is only a 32 bit application. Another restriction in Nano Server: &lt;strong&gt;You only can run 64 bit processes in Nano Server.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another approach would be installing Node.js on your host machine and copying the files into the Docker image. But I don't want to install more tools than needed on a Docker host.&lt;/p&gt;
&lt;p&gt;Therefore I show you a way to use only Docker commands and a Windows Server 2016 TP5 machine to build both Windows Server Core image as well as a Nano Server image with Node.js + npm installed.&lt;/p&gt;
&lt;h3 id="step1installmsiintowindowsservercoreimage"&gt;Step 1 - Install MSI into Windows Server Core image&lt;/h3&gt;
&lt;p&gt;A much easier way is to start with a Windows Server Core image. You can download and install the Node.js MSI package with this &lt;code&gt;Dockerfile&lt;/code&gt;. This is very similar to the Linux version and downloads, verifies the download, installs the package and then removes the download again.&lt;/p&gt;
&lt;p&gt;Now open an editor with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;notepad Dockerfile.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and enter this &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM windowsservercore

ENV NPM_CONFIG_LOGLEVEL info
ENV NODE_VERSION 4.4.5
ENV NODE_SHA256 7b2409605c871a40d60c187bd24f6f6ddf10590df060b7d905ef46b3b3aa7f81

RUN powershell -Command \
    wget -Uri https://nodejs.org/dist/v%NODE_VERSION%/node-v%NODE_VERSION%-x64.msi -OutFile node.msi -UseBasicParsing ; \
    if ((Get-FileHash node.msi -Algorithm sha256).Hash -ne $env:NODE_SHA256) {exit 1} ; \
    Start-Process -FilePath msiexec -ArgumentList /q, /i, node.msi -Wait ; \
    Remove-Item -Path node.msi

CMD [ &amp;quot;node.exe&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can build the Node.js Docker image with this command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker build -t node:4.4.5 .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that you have Node.js + npm installed in this Docker image.&lt;/p&gt;
&lt;h3 id="step2distillnodejsfolder"&gt;Step 2 - Distill Node.js folder&lt;/h3&gt;
&lt;p&gt;Now we want to distill the Node.js folder from the Docker image. To do that we have to run a Docker container and then we can copy the folder to a temporary folder on the host machine.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --name=node-temp node:4.4.5 node --version
docker cp &amp;quot;node-temp:c:\Program Files\nodejs&amp;quot; nodejs
docker rm -vf node-temp
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="step3copydeploytonanoserverimage"&gt;Step 3 - COPY deploy to Nano Server image&lt;/h3&gt;
&lt;p&gt;With this extracted folder we build the Nano Server image. The following &lt;code&gt;Dockerfile&lt;/code&gt; copies the contents of that temporary folder into the Windows directory which is already in PATH. You may want to put the files in another directory, but then you also have to add it to the &lt;code&gt;PATH&lt;/code&gt; environment.&lt;/p&gt;
&lt;p&gt;Create a sub folder for the Nano Dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir nano
notepad nano\Dockerfile.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and create this &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM nanoserver

COPY nodejs /windows/system32

CMD [ &amp;quot;node.exe&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run this command to build the Nano Server image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker build -t node:4.4.5-nano nano
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have two Docker images, one for Windows Server Core and one for Nano Server.&lt;/p&gt;
&lt;p&gt;Here is a small diagram of the three steps we just did:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/05/nodejs_nanoserver-2.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;I've uploaded both Docker images to the &lt;a href="https://hub.docker.com/r/stefanscherer/node-windows/tags/"&gt;Docker Hub&lt;/a&gt; and found out that the Windows Server Core image is about &lt;strong&gt;55 MByte&lt;/strong&gt; and the Nano Server image is only &lt;strong&gt;9 MByte&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Extracting all the layers of the first Docker image I found out that installing an MSI package also saves a copy of the package in the MSI cache. And running commands also leaves some changes in local databases and the registry which is also stored as difference in the layer.&lt;/p&gt;
&lt;p&gt;So one advice to build small Windows Docker images is to avoid installing MSI packages and prefer ZIP files or even using a COPY deployment into an image. Of course MSI packages are often more convenient to install but result in bigger image sizes.&lt;/p&gt;
&lt;h2 id="buildappwithonbuild"&gt;Build app with ONBUILD&lt;/h2&gt;
&lt;p&gt;Another easy way to dockerize your Node.js application is the &lt;code&gt;ONBUILD&lt;/code&gt; feature in the &lt;code&gt;Dockerfile&lt;/code&gt;. At least for simple examples it is very convenient to use a prepared Docker images with that feature.&lt;/p&gt;
&lt;p&gt;So let's build another &lt;code&gt;Dockerfile&lt;/code&gt; just like the official &lt;code&gt;node:onbuild&lt;/code&gt; image which does these steps to install your application and all the dependencies:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;copy package.json&lt;/li&gt;
&lt;li&gt;run npm install&lt;/li&gt;
&lt;li&gt;copy rest of sources&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So we create another folder for that &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir nano\onbuild
notepad nano\onbuild\Dockerfile.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM node:4.4.5-nano

RUN mkdir \app
WORKDIR /app

ONBUILD COPY package.json package.json
ONBUILD RUN npm install
ONBUILD COPY . .

CMD [ &amp;quot;npm.cmd&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now build the Nano Server image with the ONBUILD feature:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker build --isolation=hyperv -t node:4.4.5-nano-onbuild nano/onbuild
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have tested this with a small Node.js web server that uses Express and some other dependencies.&lt;/p&gt;
&lt;p&gt;To build a dockerized Node.js application running in a Nano Server container you only have to go to your Node.js source code and add a single line &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM nano:4.4.5-nano-onbuild
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and build your application Docker image with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker build --isolation=hyperv -t mynodeapp:nano .
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="optimizations"&gt;Optimizations&lt;/h2&gt;
&lt;p&gt;Investigating the layers of such an application showed some other temporary folders which aren't needed inside the Docker image.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A npm-cache folder&lt;/li&gt;
&lt;li&gt;Many files in temp folder, also from npm&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So we can optimize that ONBUILD &lt;code&gt;Dockerfile&lt;/code&gt; a little bit to remove these temp folders while building your application Docker image. There is a command &lt;code&gt;npm cache clean&lt;/code&gt;, but this didn't work for me, so I have changed that to some &lt;code&gt;rd&lt;/code&gt; commands. This is the final ONBUILD &lt;code&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM node:4.4.5-nano

RUN mkdir \app
WORKDIR /app

ONBUILD COPY package.json package.json
ONBUILD RUN npm install &amp;amp; rd /s /q %APPDATA%\npm-cache &amp;amp; for /d %G in (&amp;quot;%TEMP%\npm-*&amp;quot;) do rd /s /q &amp;quot;%~G&amp;quot;
ONBUILD COPY . .

CMD [ &amp;quot;npm.cmd&amp;quot;, &amp;quot;start&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that optimized Docker image deploying a simple Express web server the &lt;a href="https://hub.docker.com/r/stefanscherer/hello-dresden/tags/"&gt;final application Docker image&lt;/a&gt; went down from &lt;strong&gt;24 MByte&lt;/strong&gt; to &lt;strong&gt;15 MByte&lt;/strong&gt;. In comparison with the unoptimized Windows Server Core image the same application is &lt;strong&gt;82 MByte&lt;/strong&gt; on the Docker Hub.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you don't want to build these Node.js Docker images manually you can find them on the &lt;a href="https://hub.docker.com/r/stefanscherer/node-windows/"&gt;Docker Hub&lt;/a&gt; with links to the Dockerfiles in the &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/tree/master/node"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With such a Node.js Nano Server base image on the Docker Hub you can start developing on your Windows 10 machine. Now dockerize your Node.js apps into Nano Server containers and share them with others via the Docker Hub.&lt;/p&gt;
&lt;p&gt;The Windows Server 2016 is only needed to install MSI packages and distill the software into Nano Server images.&lt;/p&gt;
&lt;p&gt;If you find this blog post useful, just share it with your friends and colleages. Please leave a comment if you have questions or improvements. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss></html>