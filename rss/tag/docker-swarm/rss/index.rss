<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Docker-Swarm - Stefan Scherer's Blog</title><description>Just my techie notes.</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>Docker-Swarm - Stefan Scherer's Blog</title><link>http://localhost:2368/</link></image><generator>Ghost 1.8</generator><lastBuildDate>Wed, 14 Feb 2018 23:24:23 GMT</lastBuildDate><atom:link href="http://localhost:2368/tag/docker-swarm/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Setup a Windows Docker CI with AppVeyor</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;I love GitHub and all the services around it. It enables you to work from anywhere or &lt;a href="https://stefanscherer.github.io/content/images/2016/02/boot2docker-ipad.jpg"&gt;any device&lt;/a&gt; and still have your complete CI pipeline in your pocket. Every thing is done with a &lt;code&gt;git push&lt;/code&gt;. You can add services like &lt;a href="https://codeship.com"&gt;Codeship&lt;/a&gt;, &lt;a href="https://travis-ci.org"&gt;Travis&lt;/a&gt;, &lt;a href="https://circleci.com"&gt;Circle&lt;/a&gt; and lots of others to&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/setup-windows-docker-ci-appveyor/</link><guid isPermaLink="false">5986d4ec688a49000154096f</guid><category>Docker</category><category>Windows</category><category>GitHub</category><category>AppVeyor</category><category>CI</category><category>Docker-Compose</category><category>Docker-Swarm</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Fri, 10 Mar 2017 05:54:00 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;I love GitHub and all the services around it. It enables you to work from anywhere or &lt;a href="https://stefanscherer.github.io/content/images/2016/02/boot2docker-ipad.jpg"&gt;any device&lt;/a&gt; and still have your complete CI pipeline in your pocket. Every thing is done with a &lt;code&gt;git push&lt;/code&gt;. You can add services like &lt;a href="https://codeship.com"&gt;Codeship&lt;/a&gt;, &lt;a href="https://travis-ci.org"&gt;Travis&lt;/a&gt;, &lt;a href="https://circleci.com"&gt;Circle&lt;/a&gt; and lots of others to build and test your code and even the pull requests you get from others.&lt;/p&gt;
&lt;h2 id="butimonwindows"&gt;But I'm on Windows&lt;/h2&gt;
&lt;p&gt;To build applications for Windows there is a similar cloud based CI service, called &lt;a href="https://www.appveyor.com"&gt;AppVeyor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And it works pretty similar to the other well known services for Linux:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put a YAML file into your repo with the build, test and deploy steps&lt;/li&gt;
&lt;li&gt;Connect your repo to the cloud CI service&lt;/li&gt;
&lt;li&gt;From now on a &lt;code&gt;git push&lt;/code&gt; will do a lot for you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your CI pipeline is set up in a few clicks.&lt;/p&gt;
&lt;h2 id="appveyoryml"&gt;appveyor.yml&lt;/h2&gt;
&lt;p&gt;Here is an example how such a YAML file looks like for AppVeyor. This is from a &lt;a href="https://github.com/StefanScherer/win-getaddrinfo"&gt;small C/C++ project&lt;/a&gt; I made long time ago during holiday without Visual Studio at hand. I just created that GitHub repo, added the &lt;code&gt;appveyor.yml&lt;/code&gt; and voila - I got a compiled and statically linked &lt;a href="https://github.com/StefanScherer/win-getaddrinfo/releases"&gt;Windows binary at GitHub releases&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: 1.0.{build}
configuration: Release
platform: x64
build:
  project: myfavoriteproject.sln
  verbosity: minimal
test: off
artifacts:
- path: x64/Release/myfavoriteproject.exe
  name: Release
deploy:
- provider: GitHub
  auth_token:
    secure: xxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The build worker in AppVeyor is fully armed with &lt;a href="https://www.appveyor.com/docs/installed-software/"&gt;lots of development tools&lt;/a&gt;, so you can build projects for serveral languages like Node.js, .NET, Ruby, Python, Java ...&lt;/p&gt;
&lt;h2 id="dockerbuild"&gt;Docker build&lt;/h2&gt;
&lt;p&gt;AppVeyor now has released a new build worker with Windows Server 2016 and &lt;strong&gt;Docker Enterprise Edition&lt;/strong&gt; 17.03.0-ee-1 pre-installed. That instantly enables you to build, test and publish Windows Docker images in the same lightweight way.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/github_appveyor_docker.png" alt="Docker build with AppVeyor"&gt;&lt;/p&gt;
&lt;p&gt;All you have to do is to select the new build worker by adding &lt;code&gt;image: Visual Studio 2017&lt;/code&gt; to your &lt;code&gt;appveyor.yml&lt;/code&gt;. No more work to do to get a fully Windows Docker engine for your build.&lt;/p&gt;
&lt;p&gt;The following &lt;code&gt;appveyor.yml&lt;/code&gt; gives you an idea how easy an automated Docker build for Windows can be:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: 1.0.{build}
image: Visual Studio 2017

environment:
  DOCKER_USER:
    secure: xxxxxxx
  DOCKER_PASS:
    secure: yyyyyyy
install:
  - docker version

build_script:
  - docker build -t me/myfavoriteapp .

test_script:
  - docker run me/myfavoriteapp

deploy_script:
  - docker login -u=&amp;quot;$env:DOCKER_USER&amp;quot; -p=&amp;quot;$env:DOCKER_PASS&amp;quot;
  - docker push me/myfavoriteapp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a very simple example. For the tests you can think of some more sophisticated tests like using Pester, Serverspec or Cucumber. For the deploy steps you can decide when to run these, eg. only for a tagged build to push a new release.&lt;/p&gt;
&lt;h2 id="dockercompose"&gt;Docker Compose&lt;/h2&gt;
&lt;p&gt;You are not limited to build a single Docker image and run one container. Your build agent is a full Windows Docker host, so you also can install Docker Compose and spin up a multi-container application. The nice thing about AppVeyor is that the builders also have &lt;a href="https://chocolatey.org"&gt;Chocolatey&lt;/a&gt; preinstalled. So you only have to add a short single command to your &lt;code&gt;appveyor.yml&lt;/code&gt; to download and install Docker Compose.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;choco install docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="dockerswarm"&gt;Docker Swarm&lt;/h2&gt;
&lt;p&gt;You also might turn the Docker engine into a single node Docker swarm manager to work with the new commands &lt;code&gt;docker stack deploy&lt;/code&gt;. You can create a Docker Swarm with this command&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;docker swarm init
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="addprojecttobuild"&gt;Add project to build&lt;/h2&gt;
&lt;p&gt;Adding AppVeyor to one of your GitHub repos is very simple. Sign in to AppVeyor with your GitHub account and select your project to add.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/appveyor-add-project.png" alt="AppVeyor add project"&gt;&lt;/p&gt;
&lt;p&gt;Now you can also check the pull requests you or others create on GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/github-pr-green.png" alt="GitHub pull request checks green"&gt;&lt;/p&gt;
&lt;p&gt;You can click on the green checkmark to view the console output of the build.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/appveyor-build-green.png" alt="AppVeyor pull request build green"&gt;&lt;/p&gt;
&lt;h2 id="tellmeasecret"&gt;Tell me a secret&lt;/h2&gt;
&lt;p&gt;To push to the Docker Hub we need to configure some secrets in AppVeyor. After you are logged in to AppVeyor you can select the &amp;quot;Encrypt data&amp;quot; menu item from the drop down menu or use the link &lt;a href="https://ci.appveyor.com/tools/encrypt"&gt;https://ci.appveyor.com/tools/encrypt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There you can enter your cleartext secret and it creates the encrypted configuration data you can use in your &lt;code&gt;appveyor.yml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/appveyor-encrypt-data.png" alt="Appveyor encrypt configuration data"&gt;&lt;/p&gt;
&lt;p&gt;These secret variables don't get injected in pull request builds, so nobody can fork your repo and send you an &lt;code&gt;ls env:&lt;/code&gt; pull request to expose that variables in the output.&lt;/p&gt;
&lt;h2 id="immutablebuilds"&gt;Immutable builds&lt;/h2&gt;
&lt;p&gt;One of the biggest advantages over self-hosting a CI pipeline is that you get immutable builds. You just do not have to care about the dirt and dust your build left on the build worker. AppVeyor - like all other cloud based CI systems - just throws away the build worker and you get another empty one for the next build.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/appveyor-docker-build.png" alt="AppVeyor immutable build"&gt;&lt;/p&gt;
&lt;p&gt;Even if you build Windows Docker images you don't have to cleanup your Docker host. You can concentrate on your code, the build and your tests, and forget about maintain your CI workers.&lt;/p&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;I have some GitHub repos that already use AppVeyor to build Windows Docker images, so you can have a look how my setup works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/StefanScherer/dockerfiles-windows"&gt;github.com/StefanScherer/dockerfiles-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/StefanScherer/winspector"&gt;github.com/StefanScherer/winspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;AppVeyor is my #1 when it comes to automated Windows builds. With the Docker support built-in it becomes even more interesting.&lt;/p&gt;
&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss></html>