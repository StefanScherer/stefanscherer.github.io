<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>AppVeyor - Stefan Scherer's Blog</title><description>Just my techie notes.</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>AppVeyor - Stefan Scherer's Blog</title><link>http://localhost:2368/</link></image><generator>Ghost 1.8</generator><lastBuildDate>Sun, 21 Jan 2018 21:36:22 GMT</lastBuildDate><atom:link href="http://localhost:2368/tag/appveyor/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>PoC: How to build images for 1709 without 1709</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;First of all: Happy Halloween! In this blog post you'll see some spooky things - or magic? Anyway I found a way to build Windows Docker images based on the new 1709 images without running on 1709. Sounds weird?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; The tools and described workflow to build such images on&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;</description><link>http://localhost:2368/poc-build-images-for-1709-without-1709/</link><guid isPermaLink="false">59f90ee4f830c70001a9b8f1</guid><category>Docker</category><category>Windows Server 1709</category><category>windows-containers</category><category>AppVeyor</category><category>multi-arch</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Tue, 31 Oct 2017 23:55:00 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;First of all: Happy Halloween! In this blog post you'll see some spooky things - or magic? Anyway I found a way to build Windows Docker images based on the new 1709 images without running on 1709. Sounds weird?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; The tools and described workflow to build such images on old Windows Server versions may break at any time. It works for me and some special cases, but it does not mean it works for any other use-case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="the20161709gap"&gt;The 2016 &amp;lt;-&amp;gt; 1709 gap&lt;/h2&gt;
&lt;p&gt;As you might know from my &lt;a href="https://stefanscherer.github.io/docker-on-windows-server-1709/"&gt;previous blog post&lt;/a&gt; there is a gap between the old and new Windows images. You cannot pull the new 1709 Docker images on current Windows Server 2016. This means you also cannot build images without updating your build machines to Windows Server 1709.&lt;/p&gt;
&lt;h2 id="appveyor"&gt;AppVeyor&lt;/h2&gt;
&lt;p&gt;My favorite CI service for Windows is AppVeyor. They provide a Windows Server 2016 build agent with Docker and the latest base images installed. So it is very simple and convenient to build your Windows Docker images there. For example all my &lt;a href="https://github.com/StefanScherer/dockerfiles-windows"&gt;dockerfiles-windows&lt;/a&gt; Dockerfiles are built there and the images are pushed to Docker Hub.&lt;/p&gt;
&lt;p&gt;I guess it will take a while until we can choose another build agent to start building for 1709 there.&lt;/p&gt;
&lt;p&gt;But what should I do in the meantime?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should I build all 1709 images manually on a local VM?&lt;/li&gt;
&lt;li&gt;Or spin up a VM in Azure? It is possible since today.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But then I don't have the nice GitHub integration. And I have to do all the maintenance of a CI server (cleaning up disk space and so on) myself. Oh I don't want to go that way.&lt;/p&gt;
&lt;h2 id="dockerimageshavelayers"&gt;Docker images have layers&lt;/h2&gt;
&lt;p&gt;Let's have a closer look at how a Docker image looks like. Each Docker image contains of one or more layers. Each layer is read-only. Any change will be done in a new layer on top of the underlying ones.&lt;/p&gt;
&lt;p&gt;For example the Windows Docker image of a Node.js application looks more or less like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/11/windows_image_layers-2.png" alt="windows_image_layers-2"&gt;&lt;/p&gt;
&lt;p&gt;At the bottom you find the Windows base image, then we add the Node.js runtime. Then we can add our application code on top of that. This is how a Dockerfile works. Every FROM, RUN, ... is an extra layer.&lt;/p&gt;
&lt;p&gt;Technically all layers are just tarballs with files and directories in it. So when the application and framework layer are independent from the OS system layer it should be possible to rearrange them with a new OS layer.&lt;/p&gt;
&lt;h2 id="rebasedockerimage"&gt;Rebase Docker image&lt;/h2&gt;
&lt;p&gt;That is what I have tried to find out. I studied the Docker Hub API and wrote a proof of concept to &amp;quot;rebase&amp;quot; a given Windows Docker image to swap the old Windows OS layers with another one.&lt;/p&gt;
&lt;p&gt;The tool works only with information from Docker Hub so it only retrieves metadata and pushes a new manifest back to the Docker Hub. This avoids downloading hundreds of megabytes for the old nanoserver images.&lt;/p&gt;
&lt;h3 id="usecases"&gt;Use cases&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Easily apply Windows Updates to an existing Windows app in seconds. Only the update layer will be swapped.&lt;/li&gt;
&lt;li&gt;Provide your app for all available Windows Update layers to avoid download.&lt;/li&gt;
&lt;li&gt;Sync multiple images based on different Windows Update layers to the current to avoid downloading several different udpate layers for a multi-container application.&lt;/li&gt;
&lt;li&gt;Create images for Server 1709 without having a machine for it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="limits"&gt;Limits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You cannot move an app from a windowsservercore image to the nanoserver image.&lt;/li&gt;
&lt;li&gt;You also cannot move PowerShell scripts into the 1709 nanoserver image as there is no PowerShell installed.&lt;/li&gt;
&lt;li&gt;Your framework or application layer may has modified the Windows registry at build time. It then carries the old registry that may not fit to new base layer.&lt;/li&gt;
&lt;li&gt;Moving such old application layers on top of new base layers is some kind of time travel. Be warned that this tool may create corrupt images.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can find the &lt;a href="https://github.com/StefanScherer/rebase-docker-image"&gt;rebase-docker-image&lt;/a&gt; tool on GitHub. It is a Node.js command line tool which is also available on NPM.&lt;/p&gt;
&lt;p&gt;The usage looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rebase-docker-image \
    stefanscherer/hello-freiburg:windows \
    -t stefanscherer/hello-freiburg:1709 \
    -b microsoft/nanoserver:1709
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You specify the existing image, eg. &amp;quot;stefanscherer/hello-freiburg:windows&amp;quot; which is based on nanoserver 10.0.14393.x.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;-t&lt;/code&gt; option you specify the target image name that where the final manifest should be pushed.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-b&lt;/code&gt; option specifies the base image you want to use, so most of the time the &amp;quot;microsoft/nanoserver:1709&amp;quot; image.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/11/rebase_docker_image.png" alt="rebase_docker_image"&gt;&lt;/p&gt;
&lt;p&gt;When we run the tool it does its job in only a few seconds:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Retrieving information about source image stefanscherer/hello-freiburg:windows
Retrieving information about source base image microsoft/nanoserver:10.0.14393.1715
Retrieving information about target base image microsoft/nanoserver:1709
Rebasing image
Pushing target image stefanscherer/hello-freiburg:1709
Done.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now on a Windows Server 1709 we can run the application.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/11/hello-freiburg-1709.png-shadow.png" alt="hello-freiburg-1709.png-shadow"&gt;&lt;/p&gt;
&lt;p&gt;I tried this tool with some other Windows Docker images and was able to rebase the golang:1.9-nanoserver image to have a Golang build environment for 1709 without rebuilding the Golang image by myself.&lt;/p&gt;
&lt;p&gt;But I also found situations where the rebase didn't work, so don't expect it to work everywhere.&lt;/p&gt;
&lt;h2 id="appveyorcipipeline"&gt;AppVeyor CI pipeline&lt;/h2&gt;
&lt;p&gt;I also want to show you a small CI pipeline using AppVeyor to build a Windows image with &lt;code&gt;curl.exe&lt;/code&gt; installed and provide two variants of that Docker image, one for the old nanoserver and one with the nanoserver:1709 image.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/master/curl/Dockerfile"&gt;Dockerfile&lt;/a&gt; uses a multi-stage build. In the first stage we download and extract curl and its DLL's. The second stage starts again with the empty nanoserver (the fat one for Windows Server 2016) and then we just COPY deploy the binary into the fresh image. An ENTRYOINT finishes the final image.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Dockerfile"&gt;FROM microsoft/nanoserver AS download
ENV CURL_VERSION 7.56.1
WORKDIR /curl
ADD https://skanthak.homepage.t-online.de/download/curl-$CURL_VERSION.cab curl.cab
RUN expand /R curl.cab /F:* .

FROM microsoft/nanoserver
COPY --from=download /curl/AMD64/ /
COPY --from=download /curl/CURL.LIC /
ENTRYPOINT [&amp;quot;curl.exe&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This image can be built on AppVeyor and pushed to the Docker Hub.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/master/curl/push.ps1"&gt;push.ps1&lt;/a&gt; script pushes this image to Docker Hub.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker push stefanscherer/curl-windows:$version-2016
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then the rebase tool will be installed and the 1709 variant will be pushed as well to Docker Hub.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g rebase-docker-image
rebase-docker-image `
  stefanscherer/curl-windows:$version-2016 `
  -t stefanscherer/curl-windows:$version-1709 `
  -b microsoft/nanoserver:1709
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To provide my users the best experience I also draft a manifest list, just like we did for multi-arch images at the &lt;a href="https://stefanscherer.github.io/cross-build-nodejs-with-docker/"&gt;Captains Hack day&lt;/a&gt;. The final &amp;quot;tag&amp;quot; then contains both Windows OS variants.&lt;/p&gt;
&lt;p&gt;On Windows you can use Chocolatey to install the manifest-tool. In the future this feature will be integrated into the Docker CLI as &amp;quot;docker manifest&amp;quot; command.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;choco install -y manifest-tool
manifest-tool push from-spec manifest.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/master/curl/manifest.yml"&gt;manifest.yml&lt;/a&gt; lists both images and joins them together to the final &lt;code&gt;stefanscherer/curl-windows&lt;/code&gt; image.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;image: stefanscherer/curl-windows:7.56.1
tags: ['7.56', '7', 'latest']
manifests:
  -
    image: stefanscherer/curl-windows:7.56.1-2016
    platform:
      architecture: amd64
      os: windows
  -
    image: stefanscherer/curl-windows:7.56.1-1709
    platform:
      architecture: amd64
      os: windows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So on both Windows Server 2016 and Windows Server 1709 the users can run the same image and it will work.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS C:\Users\demo&amp;gt; docker run stefanscherer/curl-windows
curl: try 'curl --help' or 'curl --manual' for more information
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This requires the next Docker 17.10 EE version to work correctly, but it should be available soon. With older Docker engines it may pick the wrong version of the list of Docker images and fail running it.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This way to &amp;quot;rebase&amp;quot; Docker images works astonishingly good, but keep in mind that this is not a general purpose solution. It is always better to use the correct version on the host to rebuild your Docker images the official way.&lt;/p&gt;
&lt;p&gt;Please use the comment below if you have further questions or share what you think about that idea.&lt;/p&gt;
&lt;p&gt;Stefan&lt;br&gt;
&lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Setup a Windows Docker CI with AppVeyor</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;I love GitHub and all the services around it. It enables you to work from anywhere or &lt;a href="https://stefanscherer.github.io/content/images/2016/02/boot2docker-ipad.jpg"&gt;any device&lt;/a&gt; and still have your complete CI pipeline in your pocket. Every thing is done with a &lt;code&gt;git push&lt;/code&gt;. You can add services like &lt;a href="https://codeship.com"&gt;Codeship&lt;/a&gt;, &lt;a href="https://travis-ci.org"&gt;Travis&lt;/a&gt;, &lt;a href="https://circleci.com"&gt;Circle&lt;/a&gt; and lots of others to&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/setup-windows-docker-ci-appveyor/</link><guid isPermaLink="false">5986d4ec688a49000154096f</guid><category>Docker</category><category>Windows</category><category>GitHub</category><category>AppVeyor</category><category>CI</category><category>Docker-Compose</category><category>Docker-Swarm</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Fri, 10 Mar 2017 05:54:00 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;I love GitHub and all the services around it. It enables you to work from anywhere or &lt;a href="https://stefanscherer.github.io/content/images/2016/02/boot2docker-ipad.jpg"&gt;any device&lt;/a&gt; and still have your complete CI pipeline in your pocket. Every thing is done with a &lt;code&gt;git push&lt;/code&gt;. You can add services like &lt;a href="https://codeship.com"&gt;Codeship&lt;/a&gt;, &lt;a href="https://travis-ci.org"&gt;Travis&lt;/a&gt;, &lt;a href="https://circleci.com"&gt;Circle&lt;/a&gt; and lots of others to build and test your code and even the pull requests you get from others.&lt;/p&gt;
&lt;h2 id="butimonwindows"&gt;But I'm on Windows&lt;/h2&gt;
&lt;p&gt;To build applications for Windows there is a similar cloud based CI service, called &lt;a href="https://www.appveyor.com"&gt;AppVeyor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And it works pretty similar to the other well known services for Linux:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put a YAML file into your repo with the build, test and deploy steps&lt;/li&gt;
&lt;li&gt;Connect your repo to the cloud CI service&lt;/li&gt;
&lt;li&gt;From now on a &lt;code&gt;git push&lt;/code&gt; will do a lot for you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your CI pipeline is set up in a few clicks.&lt;/p&gt;
&lt;h2 id="appveyoryml"&gt;appveyor.yml&lt;/h2&gt;
&lt;p&gt;Here is an example how such a YAML file looks like for AppVeyor. This is from a &lt;a href="https://github.com/StefanScherer/win-getaddrinfo"&gt;small C/C++ project&lt;/a&gt; I made long time ago during holiday without Visual Studio at hand. I just created that GitHub repo, added the &lt;code&gt;appveyor.yml&lt;/code&gt; and voila - I got a compiled and statically linked &lt;a href="https://github.com/StefanScherer/win-getaddrinfo/releases"&gt;Windows binary at GitHub releases&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: 1.0.{build}
configuration: Release
platform: x64
build:
  project: myfavoriteproject.sln
  verbosity: minimal
test: off
artifacts:
- path: x64/Release/myfavoriteproject.exe
  name: Release
deploy:
- provider: GitHub
  auth_token:
    secure: xxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The build worker in AppVeyor is fully armed with &lt;a href="https://www.appveyor.com/docs/installed-software/"&gt;lots of development tools&lt;/a&gt;, so you can build projects for serveral languages like Node.js, .NET, Ruby, Python, Java ...&lt;/p&gt;
&lt;h2 id="dockerbuild"&gt;Docker build&lt;/h2&gt;
&lt;p&gt;AppVeyor now has released a new build worker with Windows Server 2016 and &lt;strong&gt;Docker Enterprise Edition&lt;/strong&gt; 17.03.0-ee-1 pre-installed. That instantly enables you to build, test and publish Windows Docker images in the same lightweight way.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/github_appveyor_docker.png" alt="Docker build with AppVeyor"&gt;&lt;/p&gt;
&lt;p&gt;All you have to do is to select the new build worker by adding &lt;code&gt;image: Visual Studio 2017&lt;/code&gt; to your &lt;code&gt;appveyor.yml&lt;/code&gt;. No more work to do to get a fully Windows Docker engine for your build.&lt;/p&gt;
&lt;p&gt;The following &lt;code&gt;appveyor.yml&lt;/code&gt; gives you an idea how easy an automated Docker build for Windows can be:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: 1.0.{build}
image: Visual Studio 2017

environment:
  DOCKER_USER:
    secure: xxxxxxx
  DOCKER_PASS:
    secure: yyyyyyy
install:
  - docker version

build_script:
  - docker build -t me/myfavoriteapp .

test_script:
  - docker run me/myfavoriteapp

deploy_script:
  - docker login -u=&amp;quot;$env:DOCKER_USER&amp;quot; -p=&amp;quot;$env:DOCKER_PASS&amp;quot;
  - docker push me/myfavoriteapp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a very simple example. For the tests you can think of some more sophisticated tests like using Pester, Serverspec or Cucumber. For the deploy steps you can decide when to run these, eg. only for a tagged build to push a new release.&lt;/p&gt;
&lt;h2 id="dockercompose"&gt;Docker Compose&lt;/h2&gt;
&lt;p&gt;You are not limited to build a single Docker image and run one container. Your build agent is a full Windows Docker host, so you also can install Docker Compose and spin up a multi-container application. The nice thing about AppVeyor is that the builders also have &lt;a href="https://chocolatey.org"&gt;Chocolatey&lt;/a&gt; preinstalled. So you only have to add a short single command to your &lt;code&gt;appveyor.yml&lt;/code&gt; to download and install Docker Compose.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;choco install docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="dockerswarm"&gt;Docker Swarm&lt;/h2&gt;
&lt;p&gt;You also might turn the Docker engine into a single node Docker swarm manager to work with the new commands &lt;code&gt;docker stack deploy&lt;/code&gt;. You can create a Docker Swarm with this command&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;docker swarm init
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="addprojecttobuild"&gt;Add project to build&lt;/h2&gt;
&lt;p&gt;Adding AppVeyor to one of your GitHub repos is very simple. Sign in to AppVeyor with your GitHub account and select your project to add.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/appveyor-add-project.png" alt="AppVeyor add project"&gt;&lt;/p&gt;
&lt;p&gt;Now you can also check the pull requests you or others create on GitHub.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/github-pr-green.png" alt="GitHub pull request checks green"&gt;&lt;/p&gt;
&lt;p&gt;You can click on the green checkmark to view the console output of the build.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/appveyor-build-green.png" alt="AppVeyor pull request build green"&gt;&lt;/p&gt;
&lt;h2 id="tellmeasecret"&gt;Tell me a secret&lt;/h2&gt;
&lt;p&gt;To push to the Docker Hub we need to configure some secrets in AppVeyor. After you are logged in to AppVeyor you can select the &amp;quot;Encrypt data&amp;quot; menu item from the drop down menu or use the link &lt;a href="https://ci.appveyor.com/tools/encrypt"&gt;https://ci.appveyor.com/tools/encrypt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There you can enter your cleartext secret and it creates the encrypted configuration data you can use in your &lt;code&gt;appveyor.yml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/appveyor-encrypt-data.png" alt="Appveyor encrypt configuration data"&gt;&lt;/p&gt;
&lt;p&gt;These secret variables don't get injected in pull request builds, so nobody can fork your repo and send you an &lt;code&gt;ls env:&lt;/code&gt; pull request to expose that variables in the output.&lt;/p&gt;
&lt;h2 id="immutablebuilds"&gt;Immutable builds&lt;/h2&gt;
&lt;p&gt;One of the biggest advantages over self-hosting a CI pipeline is that you get immutable builds. You just do not have to care about the dirt and dust your build left on the build worker. AppVeyor - like all other cloud based CI systems - just throws away the build worker and you get another empty one for the next build.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/02/appveyor-docker-build.png" alt="AppVeyor immutable build"&gt;&lt;/p&gt;
&lt;p&gt;Even if you build Windows Docker images you don't have to cleanup your Docker host. You can concentrate on your code, the build and your tests, and forget about maintain your CI workers.&lt;/p&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;I have some GitHub repos that already use AppVeyor to build Windows Docker images, so you can have a look how my setup works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/StefanScherer/dockerfiles-windows"&gt;github.com/StefanScherer/dockerfiles-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/StefanScherer/winspector"&gt;github.com/StefanScherer/winspector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;AppVeyor is my #1 when it comes to automated Windows builds. With the Docker support built-in it becomes even more interesting.&lt;/p&gt;
&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss></html>