<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Azure - Stefan Scherer's Blog</title><description>Just my techie notes.</description><link>http://localhost:2368/</link><image><url>http://localhost:2368/favicon.png</url><title>Azure - Stefan Scherer's Blog</title><link>http://localhost:2368/</link></image><generator>Ghost 1.8</generator><lastBuildDate>Sun, 21 Jan 2018 18:06:22 GMT</lastBuildDate><atom:link href="http://localhost:2368/tag/azure/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>How to run encrypted Windows websites with Docker and Træfɪk</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Nowadays we read it all the time that every website should be encrytped. Adding TLS certificates to your web server sounds like a hard task to do. You have to update your certificates before they get invalid. I don't run public websites on a regular basis, so I - like&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/how-to-run-encrypted-windows-websites-with-docker-and-traefik/</link><guid isPermaLink="false">5986d4ec688a490001540971</guid><category>Docker</category><category>Windows</category><category>Azure</category><category>Traefik</category><category>Portainer</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Fri, 10 Mar 2017 22:21:00 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Nowadays we read it all the time that every website should be encrytped. Adding TLS certificates to your web server sounds like a hard task to do. You have to update your certificates before they get invalid. I don't run public websites on a regular basis, so I - like many others I guess - have heard of Let's Encrypt, but never really tried it.&lt;/p&gt;
&lt;p&gt;But let's learn new things and try it out. I also have promised in the &lt;a href="https://blog.docker.com/2017/02/dockercast-interview-docker-captain-stefan-scherer-microsoft-docker/"&gt;interview in John Willis' Dockercast&lt;/a&gt; that I will write a blog post about it. With some modern tools you will see, it's not very complicated to run your Windows website with TLS certificates.&lt;/p&gt;
&lt;p&gt;In this blog post I will show you how to run your website in Windows containers with Docker. You can develop your website locally in a container and push it to your server. And another Windows container runs the Træfɪk proxy, that helps us with the TLS certificate as well as with its dynamic configuration to add more than just one website.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://traefik.io"&gt;Træfɪk&lt;/a&gt; is a modern HTTP reverse proxy and load balancer made to deploy microservices with ease. It supports several backends like Docker to register and update its configuration for each new started container.&lt;/p&gt;
&lt;p&gt;This picture gives you an overview of the architecture:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/architecture.png" alt="Traefik architecture"&gt;&lt;/p&gt;
&lt;p&gt;Normally Træfɪk is running inside a container and it is well known in the Linux Docker community. A few weeks ago I have seen that there also are Windows binaries available. Let's see if we can use Træfɪk in a Windows container to provide us encrypted HTTPS traffic to other Windows containers running our IIS website, or other web service.&lt;/p&gt;
&lt;h2 id="step1createawindowsdockerhostinazure"&gt;Step 1: Create a Windows Docker host in Azure&lt;/h2&gt;
&lt;p&gt;First of all we need a Windows Server 2016 machine with Docker in the cloud. I will use Azure as Microsoft provides a VM template for that. This server will be our webserver later on with an own DNS name and TLS certs running our website.&lt;/p&gt;
&lt;p&gt;Go to the &lt;a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/quick-start-windows-server"&gt;Windows Containers quick start guide&lt;/a&gt; at &lt;a href="http://docs.microsoft.com"&gt;docs.microsoft.com&lt;/a&gt; and press the &amp;quot;Deploy to Azure&amp;quot; button.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/01-deploy-to-azure-1.png" alt="Deploy to Azure"&gt;&lt;/p&gt;
&lt;p&gt;This will bring you to the Azure portal where you can customize the virtual machine. Create a new resource group, choose the location where the server should be running a and public DNS name, as well as the size of the VM.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/02-customize.png" alt="Customize machine"&gt;&lt;/p&gt;
&lt;p&gt;After you click on &amp;quot;Purchase&amp;quot; the deployment starts which should take only a few minutes.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/03-deployment-started.png" alt="Azure starts deployment"&gt;&lt;/p&gt;
&lt;p&gt;In the meantime click on the cube symbol on the left. That will show you all resource groups you have.&lt;/p&gt;
&lt;p&gt;This Windows + Docker template already creates inbound security rules for HTTPS port 443 as well as the Docker TLS port 2376. So for our purposes we don't need to add more inbound rules.&lt;/p&gt;
&lt;h2 id="step2buyadomainandupdatednsrecords"&gt;Step 2: Buy a domain and update DNS records&lt;/h2&gt;
&lt;p&gt;For Let's Encrypt you need an own domain name to get TLS certificates. For my tests I ordered a domain name at GoDaddy. But after I walked through the steps I realised that Træfɪk also can automatically update your DNS records when you use DNSimple, CloudFlare etc.&lt;/p&gt;
&lt;p&gt;But for first time domain name users like me I show you the manual steps. In my case I went to my domain provider and configured the DNS records.&lt;/p&gt;
&lt;h4 id="getthepublicipaddress"&gt;Get the public IP address&lt;/h4&gt;
&lt;p&gt;Before we can update the DNS record we need the public IP address of the VM. This IP address is also used for the Docker TLS certificates we will create later on.&lt;/p&gt;
&lt;p&gt;In the Azure Portal, open the resource group and click on the public IP address.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/04-resource-group-1.png" alt="Resource group"&gt;&lt;/p&gt;
&lt;p&gt;Write down or copy the IP address shown here.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/08-pubip-1.png" alt="Public IP address"&gt;&lt;/p&gt;
&lt;p&gt;Go back to your domain provider and enter the public IP address in the A record. If you want to run multiple websites within Docker containers, add a CNAME resource record for each sub domain you need. For this tutorial I have added &lt;code&gt;portainer&lt;/code&gt; and &lt;code&gt;whoami&lt;/code&gt; as additional sub domains.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/09-dns-a-record-cname-1.png" alt="Update DNS records"&gt;&lt;/p&gt;
&lt;p&gt;After some minutes all the DNS servers should know your domain name with the new IP address of your Windows Server 2016.&lt;/p&gt;
&lt;h2 id="step3securedockerwithtls"&gt;Step 3: Secure Docker with TLS&lt;/h2&gt;
&lt;p&gt;We now log into the Docker host with RDP. You can use the DNS name provided by Azure or use your domain name. But before you connect with RDP, add a shared folder to your RDP session so you can also copy back the Docker TLS client certificates to your local machine. With this you will also be able to control your Windows Docker engine directly from your local computer.&lt;/p&gt;
&lt;p&gt;In this example I shared my desktop folder with the Windows VM.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/10-rdp-client-add-folder.png" alt="Add folder in RDP client"&gt;&lt;/p&gt;
&lt;p&gt;Now login with the username and password entered at creation time.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/11-rdp-login.png" alt="Login with RDP"&gt;&lt;/p&gt;
&lt;h4 id="createdockertlscerts"&gt;Create Docker TLS certs&lt;/h4&gt;
&lt;p&gt;To use Docker remotely it is recommended to use client certificates, so nobody without that certs can talk to your Docker engine. The same applies if a Windows container wants to communicate with the Docker engine. Using just the unprotected port 2375 would give every container the possibility to gain access to your Docker host.&lt;/p&gt;
&lt;p&gt;Open a PowerShell terminal as an administrator to run a Windows container that can be used to create TLS certificates for your Docker engine. I already have blogged about &lt;a href="https://stefanscherer.github.io/protecting-a-windows-2016-docker-engine-with-tls/"&gt;DockerTLS in more detail&lt;/a&gt; so we just use it here as a tool.&lt;/p&gt;
&lt;p&gt;Retrieve all local IP addresses to allow the TLS certificate also from the host itself, but as well for other Windows containers to talk to your Docker engine.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ips = ((Get-NetIPAddress -AddressFamily IPv4).IPAddress) -Join ','
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also create a local folder for the client certificates.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir ~\.docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run the DockerTLS tool with &lt;code&gt;docker run&lt;/code&gt;, just append the public IP address from above to the list of &lt;code&gt;IP_ADDRESSES&lt;/code&gt;. Also adjust the &lt;code&gt;SERVER_NAME&lt;/code&gt; variable to your domain name.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --rm `
  -e SERVER_NAME=schererstefan.xyz `
  -e IP_ADDRESSES=$ips,52.XXXXXXX.198 `
  -v &amp;quot;C:\ProgramData\docker:C:\ProgramData\docker&amp;quot; `
  -v &amp;quot;$env:USERPROFILE\.docker:C:\Users\ContainerAdministrator\.docker&amp;quot; `
  stefanscherer/dockertls-windows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/12-mkdir-and-run-dockertls.png-shadow.png" alt="Run dockertls"&gt;&lt;/p&gt;
&lt;p&gt;Docker will pull the Windows image from Docker Hub and create the TLS certificates in the correct folders for your Docker engine.&lt;/p&gt;
&lt;p&gt;Afterwards you have to restart the Docker engine to use the TLS certificates. The Docker engine now additionally listen on TCP port 2376.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;restart-service docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/13-restart-docker.png-shadow.png" alt="Restart docker"&gt;&lt;/p&gt;
&lt;h4 id="addfirewallexceptionfordocker"&gt;Add firewall exception for Docker&lt;/h4&gt;
&lt;p&gt;This step is needed to make other Windows container talk to the Docker engine at port 2376. But it also has another benefit. With these certs you can use the Docker client on your local machine to communicate with the Windows Docker engine in Azure. But I will start Træfɪk later on from the Docker host itself as we need some volume mount points.&lt;/p&gt;
&lt;p&gt;The Windows Server's firewall is active, so we now have to add an exception to allow inbound traffic on port 2376. The network security group for the public IP address already has an inbound rule to the VM. This firewall exception now allows the connection to the Docker engine.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/14-inbound-rule-2376-in-vm.png-shadow.png" alt="Add firewall exception"&gt;&lt;/p&gt;
&lt;p&gt;From now on you can connect to the Docker engine listing on port 2376 from the internet.&lt;/p&gt;
&lt;h4 id="copydockerclientcertstoyourlocalmachine"&gt;Copy Docker client certs to your local machine&lt;/h4&gt;
&lt;p&gt;To setup a working communication from your local machine, copy the Docker client certificates from the virtual machine through the RDP session back to your local machine.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/17-copy-docker-certs.png-shadow.png" alt="Copy Docker TLS certs to client"&gt;&lt;/p&gt;
&lt;p&gt;On your local machine try to connect with the remote Windows Docker engine with TLS encryption and the client certs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ DOCKER_CERT_PATH=~/Desktop/.docker DOCKER_TLS_VERIFY=1 docker -H tcp://schererstefan.xyz:2376 version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/18-mac-client.png" alt="Docker client from Mac"&gt;&lt;/p&gt;
&lt;p&gt;Now you are able to start and stop containers as you like.&lt;/p&gt;
&lt;h2 id="step4runtrfkandotherservices"&gt;Step 4: Run Træfɪk and other services&lt;/h2&gt;
&lt;p&gt;Now comes the fun part. We use Docker and Docker Compose to describe which containers we want to run.&lt;/p&gt;
&lt;h4 id="installdockercompose"&gt;Install Docker Compose&lt;/h4&gt;
&lt;p&gt;To spin up all our containers I use Docker Compose and a &lt;code&gt;docker-compose.yml&lt;/code&gt; file that describes all services.&lt;/p&gt;
&lt;p&gt;The Windows VM does not come with Docker Compose. So we have to install Docker Compose first. If you are working remotely you can use your local installation of Compose and skip this step.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Invoke-WebRequest &amp;quot;https://github.com/docker/compose/releases/download/1.11.2/docker-compose-Windows-x86_64.exe&amp;quot; `
  -UseBasicParsing -OutFile $Env:ProgramFiles\docker\docker-compose.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you prefer Chocolatey, use &lt;code&gt;choco install docker-compose&lt;/code&gt; instead.&lt;/p&gt;
&lt;h4 id="createdatafoldersondockerhost"&gt;Create data folders on Docker host&lt;/h4&gt;
&lt;p&gt;You need to persist some data outside of the Docker containers, so we create some data folders. Træfɪk retrieves the TLS certs and these should be persisted outside of the container. Otherwise you run into the Let's Encrypt rate limit of 20 requests per week to obtain new certificates. This happened to me trying different things with Træfɪk and starting and killing the container lots of times.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS C:\Users\demo&amp;gt; mkdir sample
PS C:\Users\demo&amp;gt; cd sample
PS C:\Users\demo\sample&amp;gt; mkdir traefikdata
PS C:\Users\demo\sample&amp;gt; mkdir portainerdata
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="dockercomposeyml"&gt;docker-compose.yml&lt;/h4&gt;
&lt;p&gt;For a first test we define two services, the traefik service and a example web server called whoami. This tutorial should give you just an idea and you can extend the YAML file to your needs. Run an IIS website? Put it into a container image. And another IIS website? Just run a separate container with that other website in it. You see you don't have to mix multiple sites, just leave them alone in single microservice images.&lt;/p&gt;
&lt;p&gt;Open up an editor and create the YAML file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS C:\Users\demo\sample&amp;gt; notepad docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;version: '2.1'
services:
  traefik:
    image: stefanscherer/traefik-windows
    ports:
      - &amp;quot;8080:8080&amp;quot;
      - &amp;quot;443:443&amp;quot;
    volumes:
      - ./traefikdata:C:/etc/traefik
      - ${USERPROFILE}/.docker:C:/etc/ssl:ro

  whoami:
    image: stefanscherer/whoami-windows
    depends_on:
      - traefik
    labels:
      - &amp;quot;traefik.backend=whoami&amp;quot;
      - &amp;quot;traefik.frontend.entryPoints=https&amp;quot;
      - &amp;quot;traefik.frontend.rule=Host:whoami.schererstefan.xyz&amp;quot;

networks:
  default:
    external:
      name: nat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I already have built a Træfɪk Windows Docker image that you can use. There might be an official image in the future. If you don't want to use my image, just use this &lt;code&gt;Dockerfile&lt;/code&gt; and replace the &lt;code&gt;image: stefanscherer/traefik-windows&lt;/code&gt; with &lt;code&gt;build: .&lt;/code&gt;, so Docker Compose will build the Træfɪk image for you.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; looks very simple as we directly add the Go binary to the Nanoserver Docker image and define some volumes and labels.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM microsoft/nanoserver

ADD https://github.com/containous/traefik/releases/download/v1.2.0-rc2/traefik_windows-amd64 /traefik.exe

VOLUME C:/etc/traefik
VOLUME C:/etc/ssl

EXPOSE 80
ENTRYPOINT [&amp;quot;/traefik&amp;quot;, &amp;quot;--configfile=C:/etc/traefik/traefik.toml&amp;quot;]

# Metadata
LABEL org.label-schema.vendor=&amp;quot;Containous&amp;quot; \
      org.label-schema.url=&amp;quot;https://traefik.io&amp;quot; \
      org.label-schema.name=&amp;quot;Traefik&amp;quot; \
      org.label-schema.description=&amp;quot;A modern reverse-proxy&amp;quot; \
      org.label-schema.version=&amp;quot;v1.2.0-rc2&amp;quot; \
      org.label-schema.docker.schema-version=&amp;quot;1.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="traefiktoml"&gt;traefik.toml&lt;/h4&gt;
&lt;p&gt;Træfɪk needs a configuration file where you specify your email address for the Let's Encrypt certificate requests. You will also need the IP address of the container network so that Træfɪk can contact your Docker engine.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ip=(Get-NetIPAddress -AddressFamily IPv4 `
   | Where-Object -FilterScript { $_.InterfaceAlias -Eq &amp;quot;vEthernet (HNS Internal NIC)&amp;quot; } `
   ).IPAddress
Write-Host $ip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now open an editor to create the &lt;code&gt;traefik.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS C:\Users\demo\sample&amp;gt; notepad traefikdata\traefik.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enter that IP address at the &lt;code&gt;endpoint&lt;/code&gt; of the &lt;code&gt;[docker]&lt;/code&gt; section. Also adjust the domain names&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-toml"&gt;[web]
address = &amp;quot;:8080&amp;quot;

[docker]
domain = &amp;quot;schererstefan.xyz&amp;quot;
endpoint = &amp;quot;tcp://172.24.128.1:2376&amp;quot;
watch = true

[docker.tls]
ca = &amp;quot;C:/etc/ssl/ca.pem&amp;quot;
cert = &amp;quot;C:/etc/ssl/cert.pem&amp;quot;
key = &amp;quot;C:/etc/ssl/key.pem&amp;quot;

# Sample entrypoint configuration when using ACME
[entryPoints]
  [entryPoints.https]
  address = &amp;quot;:443&amp;quot;
    [entryPoints.https.tls]

[acme]

# Email address used for registration
#
# Required
#
email = &amp;quot;you@yourmailprovider.com&amp;quot;

storage = &amp;quot;c:/etc/traefik/acme.json&amp;quot;
entryPoint = &amp;quot;https&amp;quot;

[[acme.domains]]
   main = &amp;quot;schererstefan.xyz&amp;quot;
   sans = [&amp;quot;whoami.schererstefan.xyz&amp;quot;, &amp;quot;portainer.schererstefan.xyz&amp;quot;, &amp;quot;www.schererstefan.xyz&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="openfirewallforallcontainerportsused"&gt;Open firewall for all container ports used&lt;/h4&gt;
&lt;p&gt;Please notice that the Windows firewall is also active for the container network. The &lt;code&gt;whoami&lt;/code&gt; service listens on port 8000 in each container. To make Træfɪk connect to the &lt;code&gt;whoami&lt;/code&gt; containers you have to add a firewall exception for port 8000.&lt;/p&gt;
&lt;p&gt;Docker automatically adds a firewall exception for all ports mapped to the host with &lt;code&gt;ports:&lt;/code&gt; in the &lt;code&gt;docker-compose.yml&lt;/code&gt;. But for the exposed ports this does not happen automatically.&lt;/p&gt;
&lt;h4 id="spinuptrfkandwhoami"&gt;Spin up Træfɪk and whoami&lt;/h4&gt;
&lt;p&gt;Now it's time to spin up the two containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can see the output of each container and stop them by pressing &lt;code&gt;CTRL+C&lt;/code&gt;. If you want to run them detached in the background, use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So see the output of the services you can use &lt;code&gt;docker-compose logs traefik&lt;/code&gt; or &lt;code&gt;docker-compose logs whoami&lt;/code&gt; at any time.&lt;/p&gt;
&lt;p&gt;Træfɪk now fetches TLS certificates for your domain with the given sub domains. Træfɪk listens for starting and stopping containers.&lt;/p&gt;
&lt;h2 id="testwithabrowser"&gt;Test with a browser&lt;/h2&gt;
&lt;p&gt;Now open a browser on your local machine and try your TLS encrypted website with the subdomain &lt;code&gt;whoami&lt;/code&gt;. You should see a text like &lt;code&gt;I'm 3e1f17ecbba3&lt;/code&gt; which is the hostname of the container.&lt;/p&gt;
&lt;p&gt;Now let's try Træfɪk load balancing feature by scaling up the &lt;code&gt;whoami&lt;/code&gt; service.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose scale whoami=3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now there are three &lt;code&gt;whoami&lt;/code&gt; containers running and Træfɪk knows all three of them. Each request to the subdomain will be load balanced to one of these containers. You can &lt;code&gt;SHIFT&lt;/code&gt;-reload your page in the browser and see that each request returns another hostname.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/15-browser.png" alt="Test whoami service with browser"&gt;&lt;/p&gt;
&lt;p&gt;So we have a secured HTTPS connection to our Windows containers.&lt;/p&gt;
&lt;h2 id="iis"&gt;IIS&lt;/h2&gt;
&lt;p&gt;The power of Docker is that you can run multiple services on one machine if you have resources left. So let's add another web server, let's choose an IIS server.&lt;/p&gt;
&lt;p&gt;Add these lines to the &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  www:
    image: microsoft/iis
    expose:
      - 80
    depends_on:
      - traefik
    labels:
      - &amp;quot;traefik.backend=www&amp;quot;
      - &amp;quot;traefik.frontend.entryPoints=https&amp;quot;
      - &amp;quot;traefik.frontend.rule=Host:www.schererstefan.xyz&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Remember to add a firewall exception for port 80 manually. After that spin up the IIS container with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up -d www
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And check the new sub domain. You will see the welcome page of IIS.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/iis-welcom.png" alt="IIS welcome page"&gt;&lt;/p&gt;
&lt;h2 id="portainer"&gt;Portainer&lt;/h2&gt;
&lt;p&gt;Let's add another useful service to monitor your Docker engine. Portainer is a very good UI for that task and it is also available as a Windows Docker image.&lt;/p&gt;
&lt;p&gt;Add another few lines to our &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  portainer:
    image: portainer/portainer
    command: -H tcp://172.24.128.1:2376 --tlsverify
    volumes:
      - ./portainerdata:C:/data
      - ${USERPROFILE}/.docker:C:/certs
    depends_on:
      - traefik
    labels:
      - &amp;quot;traefik.backend=portainer&amp;quot;
      - &amp;quot;traefik.frontend.entryPoints=https&amp;quot;
      - &amp;quot;traefik.frontend.rule=Host:portainer.schererstefan.xyz&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Portainer also needs the client certs to communicate with the Docker engine. Another volume mount point is used to persist data like your admin login outside the container.&lt;/p&gt;
&lt;p&gt;Now run Portainer with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up -d portainer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then open your browser on your local machine with the subdomain. When you open it the first time Portainer will ask you for an admin password. Enter a password you want to use and then login with it.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/19-portainer-login.png" alt="Portainer login"&gt;&lt;/p&gt;
&lt;p&gt;Now you have an UI to see all containers running, all Docker images downloaded etc.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/20-portainer-dashboard.png" alt="Portainer dashboard"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2017/03/21-portainer-containers.png" alt="Portainer containers"&gt;&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;What we have learned is that Træfɪk works pretty good on Windows. It helps us securing our websites with TLS certificates. In combination with Docker Compose you can add or remove new websites on the fly or even scale some services with the built-in load balancer of Træfɪk.&lt;/p&gt;
&lt;p&gt;Read more details in the &lt;a href="https://docs.traefik.io"&gt;Træfɪk documentation&lt;/a&gt; as I can give you only a short intro of its capabilities.&lt;/p&gt;
&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>How to protect a Windows 2016 Docker engine with TLS</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Today I have started a Windows Server 2016 VM with Container support in Azure. This is pretty easy as there is a prebuilt VM with the Docker base images. But I want a secured connection from my laptop to the Windows Docker engine running in Azure.&lt;/p&gt;
&lt;p&gt;There is a tutorial&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/protecting-a-windows-2016-docker-engine-with-tls/</link><guid isPermaLink="false">5986d4ec688a49000154096a</guid><category>Docker</category><category>Windows</category><category>Azure</category><category>TLS</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Sun, 23 Oct 2016 22:35:19 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Today I have started a Windows Server 2016 VM with Container support in Azure. This is pretty easy as there is a prebuilt VM with the Docker base images. But I want a secured connection from my laptop to the Windows Docker engine running in Azure.&lt;/p&gt;
&lt;p&gt;There is a tutorial &lt;a href="https://docs.docker.com/engine/security/https/"&gt;Protect the Docker daemon socket&lt;/a&gt; at the website of Docker which uses the &lt;code&gt;openssl&lt;/code&gt; tool to create all the certificates etc. But how should we do this on Windows?&lt;/p&gt;
&lt;h2 id="justcontainerizewhatsthere"&gt;Just containerize what's there&lt;/h2&gt;
&lt;p&gt;I have seen the &lt;a href="https://github.com/Microsoft/Virtualization-Documentation/tree/master/windows-server-container-tools/DockerTLS"&gt;DockerTLS&lt;/a&gt; script in a GitHub repo from Microsoft. But this script installs OpenSSL on my machine which I don't want to.&lt;/p&gt;
&lt;p&gt;My first thought was, let's put this script + OpenSSL into a Docker image and run it in a Windows container.&lt;/p&gt;
&lt;p&gt;So this &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/2e2a5b12252816744f5414e0621e12bb74b6f59c/dockertls/Dockerfile"&gt;Dockerfile&lt;/a&gt; was my first attempt to just use Chocolatey to install OpenSSL, download the PowerShell script from the Microsoft GitHub repo. Done. The script can run in a safe environment and I don't have to install software on my Docker host.&lt;/p&gt;
&lt;h2 id="dockertls"&gt;DockerTLS&lt;/h2&gt;
&lt;p&gt;But there is still work to do on the host to configure the Docker engine which I wanted to automate a little more. So it would be great to have a tool that can&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;generate all TLS certs&lt;/li&gt;
&lt;li&gt;create or update the Docker &lt;code&gt;daemon.json&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;Put the client certs into my home directory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But still we need a program or script with OpenSSL to do that. I thought this tool should be deployed in a Docker image and shared on the Docker Hub. And here it is:&lt;/p&gt;
&lt;h2 id="dockerrundockertls"&gt;docker run dockertls&lt;/h2&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/10/dockertls.png" alt="dockertls"&gt;&lt;/p&gt;
&lt;p&gt;The script &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/master/dockertls/generate-certs.ps1"&gt;generate-certs.ps1&lt;/a&gt; creates the TLS certs and copies them to the folders that would be used on the Docker host. The script would directly work on a Docker host if you have OpenSSL/LibreSSL installed.&lt;/p&gt;
&lt;p&gt;The dockertls Docker image is created with this &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/blob/master/dockertls/Dockerfile"&gt;Dockerfile&lt;/a&gt;. It installs LibreSSL from OpenBSD (thanks to &lt;a href="https://twitter.com/friism"&gt;Michael Friis&lt;/a&gt; for that optimization) and copies the PowerShell script inside the image.&lt;/p&gt;
&lt;p&gt;You can find the &lt;a href="https://github.com/StefanScherer/dockerfiles-windows/tree/master/dockertls"&gt;full source code&lt;/a&gt; of the dockertls image in my &lt;a href="https://github.com/StefanScherer/dockerfiles-windows"&gt;dockerfiles-windows&lt;/a&gt; GitHub repo if you want to build the Docker image yourself.&lt;/p&gt;
&lt;p&gt;Otherwise you can just the &lt;a href="https://hub.docker.com/r/stefanscherer/dockertls-windows/"&gt;dockertls Docker image&lt;/a&gt; from the Docker Hub.&lt;/p&gt;
&lt;h3 id="dryrun"&gt;Dry run&lt;/h3&gt;
&lt;p&gt;As you don't trust me or my Docker image you can do a dry run with some temporary folders where the container can copy files into without destroying your Docker host.&lt;/p&gt;
&lt;p&gt;Just create two folders:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir server
mkdir client\.docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run the Windows container with the environment variables &lt;code&gt;SERVER_NAME&lt;/code&gt; and &lt;code&gt;IP_ADDRESSES&lt;/code&gt; as well as two volume mounts to write the certs back to the host:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --rm `
  -e SERVER_NAME=$(hostname) `
  -e IP_ADDRESSES=127.0.0.1,192.168.254.123 `
  -v &amp;quot;$(pwd)\server:C:\ProgramData\docker&amp;quot; `
  -v &amp;quot;$(pwd)\client\.docker:C:\Users\ContainerAdministrator\.docker&amp;quot; `
  stefanscherer/dockertls-windows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Afterwards check the folders:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dir server\certs.d
dir server\config
dir client\.docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will see that there are three pem files for the server, the &lt;code&gt;daemon.json&lt;/code&gt; file as well as three pem files for the client.&lt;/p&gt;
&lt;p&gt;Of course you could manually copy the files and try them out. But this Docker image can do this for you as well.&lt;/p&gt;
&lt;h3 id="fullrun"&gt;Full run&lt;/h3&gt;
&lt;p&gt;You may have to create the &lt;code&gt;.docker&lt;/code&gt; folder in your home directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir $env:USERPROFILE\.docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run the container with the correct paths on the host so it can copy all certs and configs to the right place. The script can read an existing &lt;code&gt;daemon.json&lt;/code&gt; and update it to keep all other configuration untouched.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --rm `
  -e SERVER_NAME=$(hostname) `
  -e IP_ADDRESSES=127.0.0.1,192.168.254.123 `
  -v &amp;quot;C:\ProgramData\docker:C:\ProgramData\docker&amp;quot; `
  -v &amp;quot;$env:USERPROFILE\.docker:C:\Users\ContainerAdministrator\.docker&amp;quot; `
  stefanscherer/dockertls-windows
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you have to restart the Docker service in an administrator Shell with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;restart-service docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One last step is needed on your host. You have to open the port 2376 in your firewall so you can access the machine from the outside. But then you're done on your host.&lt;/p&gt;
&lt;p&gt;You can recreate the TLS certs with the same command and just restart the Docker service afterwards.&lt;/p&gt;
&lt;h3 id="testtlsconnection"&gt;Test TLS connection&lt;/h3&gt;
&lt;p&gt;Now test the connection to the TLS secured Docker service with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker --tlsverify `
  --tlscacert=$env:USERPROFILE\.docker\ca.pem `
  --tlscert=$env:USERPROFILE\.docker\cert.pem `
  --tlskey=$env:USERPROFILE\.docker\key.pem `
  -H=tcp://127.0.0.1:2376 version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or just set some environment variables&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$env:DOCKER_HOST=&amp;quot;tcp://127.0.0.1:2376&amp;quot;
$env:DOCKER_TLS_VERIFY=&amp;quot;1&amp;quot;
docker version
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="azure"&gt;Azure&lt;/h3&gt;
&lt;p&gt;In an Azure VM you should use your DNS name for the VM in the &lt;code&gt;SERVER_NAME&lt;/code&gt; environment variable and your public and local IP addresses of that machine.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/10/dockertls-run---Kopie.png" alt="docker-run"&gt;&lt;/p&gt;
&lt;p&gt;You have to open the firewall port 2376 on your Windows Docker host.&lt;/p&gt;
&lt;p&gt;For Azure you also have to add a incoming rule for port 2376 in your network security group.&lt;/p&gt;
&lt;p&gt;Then you have to securely transfer the three client pem files from your Azure VM to your laptop.&lt;/p&gt;
&lt;p&gt;I've done that on my old Windows 10 machine which is only a 32bit machine, but I still can work with the Windows 2016 Docker engine running in Azure.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/10/dockertls-1.png" alt="docker-version"&gt;&lt;/p&gt;
&lt;p&gt;As always, please leave a comment if you have questions or improvements or want to share your thoughts. You can follow me on Twitter &lt;a href="https://twitter.com/stefscherer"&gt;@stefscherer&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>How to run a Windows Docker Engine in Azure</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Over the weekend I had a look at how easy it is to get in touch with Docker on Windows. But this time with the Windows Docker Engine in mind. In this blog post I show you how to run a Windows Docker Engine in a VM in Azure.&lt;/p&gt;
&lt;p&gt;The&lt;/p&gt;&lt;/div&gt;</description><link>http://localhost:2368/how-to-run-windows-docker-engine-in-azure/</link><guid isPermaLink="false">5986d4ec688a490001540960</guid><category>Docker</category><category>Windows</category><category>Azure</category><dc:creator>Stefan Scherer</dc:creator><pubDate>Mon, 01 Feb 2016 12:47:00 GMT</pubDate><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Over the weekend I had a look at how easy it is to get in touch with Docker on Windows. But this time with the Windows Docker Engine in mind. In this blog post I show you how to run a Windows Docker Engine in a VM in Azure.&lt;/p&gt;
&lt;p&gt;The Docker Engine has an API that is compatible between all platforms. So you can even work from your Linux, Mac or Windows notebook and build and run Windows Containers in that remote VM.&lt;/p&gt;
&lt;p&gt;So let's get started. The Windows Docker Engine is a work in progress, but it's really worth to have a closer look at it right now. It is available with the Windows Server 2016 Technical Preview 4, or TP4 for short.&lt;/p&gt;
&lt;p&gt;To avoid building own VM's locally or installing it on bare metal we just use the prebuilt TP4 VM in Azure.&lt;/p&gt;
&lt;h3 id="justwithaclick"&gt;Just with a click&lt;/h3&gt;
&lt;p&gt;A really nice feature is the &lt;strong&gt;Deploy to Azure&lt;/strong&gt; button. I have found a good template at the &lt;a href="https://github.com/Azure/azure-quickstart-templates"&gt;azure-quickstart-templates&lt;/a&gt; repo and enhanced it a little bit to have more Docker tools pre-installed. For details have a look at my &lt;a href="https://github.com/StefanScherer/docker-windows-azure"&gt;docker-windows-azure&lt;/a&gt; repo.&lt;/p&gt;
&lt;p&gt;If you have an account for Microsoft Azure you can click on the following button to create the VM with this template. And if not, there also is a short trial period where you can test-drive Azure for some weeks.&lt;/p&gt;
&lt;a href="https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2FStefanScherer%2Fdocker-windows-azure%2Fmaster%2Fazuredeploy.json" target="_blank"&gt;
    &lt;img src="http://azuredeploy.net/deploybutton.png"&gt;
&lt;/a&gt;
&lt;h3 id="azurecli"&gt;Azure CLI&lt;/h3&gt;
&lt;p&gt;If you have the &lt;a href="https://azure.microsoft.com/documentation/articles/xplat-cli-install/"&gt;Azure CLI&lt;/a&gt; installed you also can spin up the Windows Docker Engine VM from the command line.&lt;/p&gt;
&lt;p&gt;The command takes the JSON template file from the &lt;a href="https://github.com/StefanScherer/docker-windows-azure"&gt;docker-windows-azure&lt;/a&gt; repo and adds the parameters that are needed to customize the VM and in which region it should be started.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;azure group deployment create Group docker-tp4 \
  --template-uri https://raw.githubusercontent.com/StefanScherer/docker-windows-azure/master/azuredeploy.json \
  -p '{
    &amp;quot;adminUsername&amp;quot;: {&amp;quot;value&amp;quot;: &amp;quot;docker&amp;quot;},
    &amp;quot;adminPassword&amp;quot;: {&amp;quot;value&amp;quot;: &amp;quot;Super$ecretPass123&amp;quot;},
    &amp;quot;dnsNameForPublicIP&amp;quot;: {&amp;quot;value&amp;quot;: &amp;quot;docker-tp4&amp;quot;},
    &amp;quot;VMName&amp;quot;: {&amp;quot;value&amp;quot;: &amp;quot;docker-tp4&amp;quot;},
    &amp;quot;location&amp;quot;: {&amp;quot;value&amp;quot;: &amp;quot;West US&amp;quot;}
    }'
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="connecttothewindowsdockerengine"&gt;Connect to the Windows Docker Engine&lt;/h2&gt;
&lt;p&gt;Now that the VM is up and running in Azure we want to use it. So we have to connect to the Windows Docker Engine.&lt;/p&gt;
&lt;p&gt;There are several ways to do that.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;RDP&lt;/strong&gt; to connect to the VM and use the Command Shell there to run docker commands locally in the VM.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;WinRM&lt;/strong&gt; to login to the VM. This connection is protected with a self-signed certifcate that is created on startup. But I had some trouble with the Go/Ruby WinRM clients for OSX, so I also added OpenSSH.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;SSH&lt;/strong&gt; to login to the VM. Just grab the FQDN or the IP of the VM and ssh into it. Then you also can run docker commands locally in the VM. Add your public SSH key for password-less logins.&lt;/li&gt;
&lt;li&gt;Use the &lt;strong&gt;Docker API&lt;/strong&gt; running at HTTP port 2375 to connect from your notebook. Then you can remote control the Windows Docker Engine from your Windows, Linux or Mac client.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="remotedockerapi"&gt;Remote Docker API&lt;/h2&gt;
&lt;p&gt;I'll show you the last method of the list to connect your local Docker client to the remote Windows Docker Engine.&lt;/p&gt;
&lt;p&gt;Please notice that using the &lt;strong&gt;unsecure HTTP port 2375&lt;/strong&gt; is not recommended. Securing the Docker port with a TLS certificate is part of a future blog post. There also is some good advice in &lt;a href="http://blogsprajeesh.blogspot.de/2015/09/docker-for-windows-on-azure-vm-securing.html"&gt;Docker for windows on Azure VM : Securing the host and TLS&lt;/a&gt; from Prajeesh Prathap.&lt;/p&gt;
&lt;p&gt;I hope that &lt;code&gt;docker-machine&lt;/code&gt; can do this step for you in the near future. It can generate such certs and upload them as well can help you setting the environment variables for the Docker Client.&lt;/p&gt;
&lt;p&gt;But for now we just set the environment variables manually.&lt;/p&gt;
&lt;p&gt;You need the full qualified domain name (FQDN) of your VM in Azure or at least the public IP address. In combination with the &lt;code&gt;azure&lt;/code&gt; cli you can retrieve the IP address and set all the environments in a Linux/Mac/Cygwin shell with the following commands.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;unset DOCKER_MACHINE_NAME
unset DOCKER_TLS_VERIFY
unset DOCKER_CERT_PATH
export DOCKER_HOST=tcp://$(azure vm show Group docker-tp4 | grep &amp;quot;Public IP address&amp;quot; | cut -d : -f 3):2375
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The three &lt;code&gt;unset&lt;/code&gt; commands are just for the case that you already use &lt;code&gt;docker-machine&lt;/code&gt; with TLS for some other VM's or machines in the Cloud. This just turns off the TLS checks in the Docker Client for now to connect to the Windows Docker Engine.&lt;br&gt;
For other shells like PowerShell or CMD shell it is the same. Just delete all DOCKER_ environment variables and set the &lt;code&gt;DOCKER_HOST&lt;/code&gt; environment variable to &lt;code&gt;tcp://ip-of-your-tp4-vm:2375&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we can check that the Docker Client really talks to our new Windows Docker Engine. So check which Docker images are available with this command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker images
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And yes, there is the &lt;code&gt;windowsservercore&lt;/code&gt; Docker image which is the base image to work with Docker on Windows.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/02/Bildschirmfoto-2016-02-01-um-08-43-33.png" alt="docker-images"&gt;&lt;/p&gt;
&lt;p&gt;Now it is time to run the first Windows Docker container. We just run an interactive container to get a cross-platform feeling if your are working on a Linux or OSX machine.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it windowsservercore cmd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the Docker container has started your OSX terminal turns into a Window command shell and you are in a cmd prompt running in a Windows Container in Azure:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2016/02/Bildschirmfoto-2016-02-01-um-08-44-29.png" alt="docker-run-cmd"&gt;&lt;/p&gt;
&lt;p&gt;Let's look around inside that container. Go to &lt;code&gt;C:\&lt;/code&gt; and check the files there. List all processes. You won't find much processes inside it as well as there is no Docker Engine inside. You really are working inside a Windows Container now.&lt;/p&gt;
&lt;p&gt;Just type &lt;code&gt;exit&lt;/code&gt; to stop the Windows Container again and you are back in your local terminal.&lt;/p&gt;
&lt;h2 id="nextsteps"&gt;Next steps&lt;/h2&gt;
&lt;p&gt;All the normal Docker commands like &lt;code&gt;docker build&lt;/code&gt; and &lt;code&gt;docker run&lt;/code&gt; can be used from your local Notebook.&lt;/p&gt;
&lt;p&gt;You also can use &lt;code&gt;docker search&lt;/code&gt; and &lt;code&gt;docker pull&lt;/code&gt; to pull some prebuilt Docker Images from Microsoft.&lt;/p&gt;
&lt;p&gt;Now it is time to build the first Windows Docker images and run them later on. As an inspiration you can have a look at some Dockerfiles for Windows at one of these places&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/brogersyh/Dockerfiles-for-windows"&gt;brogersyh/Dockerfiles-for-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/StefanScherer/dockerfiles-windows"&gt;StefanScherer/dockerfiles-windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stefanscherer.github.io/create-an-io-js-container-image-for-windows/index.html"&gt;Create a Node.js Container image for Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you find this blog post useful, just share it with your friends and colleages. Please leave a comment if you have questions or improvements.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss></html>